openapi: 3.1.0
servers:
  - url: https://www.kookapp.cn/api/v3
    description: 机器人接口
info:
  title: KOOK 机器人API v3 开发者版
  version: 3.0.0
  termsOfService: https://developer.kookapp.cn/doc/privacy
  contact:
    email: service@kookapp.cn
  license:
    name: MIT
    url: https://github.com/kaiheila/api-docs/blob/main/LICENSE
  description: >
    <br>

    <div style="background-color: #F0F0F0;padding: 12px 0px 12px
    12px;border-left: 5px solid #F90258;">

    这不是一份官方文档，仅用于查看官方提供的OAS文件。

    </div>  

    <br>


    ## 引言


    此文档仅用于方便开发者查看、确认 KOOK 机器人 API 接口，官方文档地址：[KOOK
    开发者平台](https://developer.kookapp.cn/doc/)


    两份文档内容基本相同，你可以选择自己习惯的查看方式。


    建议使用[rapidoc](https://mrin9.github.io/RapiDoc/index.html)查看此 OpenAPI
    描述文件，示例链接：[文档查看示例](https://fi6.github.io/kaiheila-api-docs/oas/rapidoc-view.html)


    如果发现有任何问题，请提交 Issue/Pull Request，我们将尽快进行修复与合并。


    ## 简介


    欢迎来到开发者酒馆，快找个位置随便坐！开发者中心的文档提供了丰富的 API
    接口，介绍了机器人的开发语言、能力、调试等内容，帮助你快速了解机器人开发的方方面面，相信你在这里永远都不会空手而归。


    我们将所有文档都藏在了 [GitHub](https://github.com/kaiheila/api-docs) 上，而且我们会不断添加新的功能！


    ### Bugs


    如果你在使用 KOOK 的 API 过程中遇见了 Bug，并且希望上报给我们来纠正这个错误的话，我们提供了两种反馈方式。


    - 你可以直接在 KOOK 官方的[开发者内测](https://kook.top/rc6aEk)中进行实时反馈，我们的技术会跟实时跟进你们的问题；

    - 同时我们我们也提供了在 [GitHub](https://github.com/kaiheila/api-docs) 中的 [issue
    tracker](https://github.com/kaiheila/api-docs) 中进行反馈。


    ### SDK


    热心的社区开发者们已经为大家准备了多种语言的 SDK，无需重复造轮子，上手即可轻松使用！如果希望你的 SDK
    展示在此处，请于开发者服务器内联系`小波波#9366`。


    | 语言                  | 仓库名                             |
    仓库地址                                                          |
    服务器邀请                            |

    | --------------------- | ---------------------------------- |
    ----------------------------------------------------------------- |
    ------------------------------------- |

    | PHP                   | kaiheila/php-bot                   |
    [仓库链接](https://github.com/kaiheila/php-bot)                   |
    暂无                                  |

    | JavaScript/TypeScript | fi6/KBotify & shugen002/BotRoot    |
    [仓库链接](https://github.com/fi6/kBotify)                        |
    [服务器邀请](https://kook.top/GO6qHj) |

    | JavaScript/TypeScript | kookts/kook.ts                     |
    [仓库链接](https://github.com/kookts/kook.ts)                     |
    [服务器邀请](https://kook.top/GO6qHj) |

    | Python                | TWT233/khl.py                      |
    [仓库链接](https://github.com/TWT233/khl.py)                      |
    [服务器邀请](https://kook.top/JJE0Es) |

    | Python                | Tian-que/nonebot-adapter-kaiheila  |
    [仓库链接](https://github.com/Tian-que/nonebot-adapter-kaiheila)  |
    暂无                                  |

    | Python                | OlivOS-Team/OlivOS                 |
    [仓库链接](https://github.com/OlivOS-Team/OlivOS)                 |
    [服务器邀请](https://kook.top/8orLDo) |

    | Ruby                  | DessertShop/KHL                    |
    [仓库链接](https://github.com/DessertShop/KHL)                    |
    [服务器邀请](https://kook.top/ie2ymJ) |

    | 易语言                | 大鑫/酷黑                          |
    暂无                                                              |
    [服务器邀请](https://kook.top/GymA7P) |

    | 易语言                | Cyerol/Mengko 梦果框架             |
    暂无                                                              |
    [服务器邀请](https://kook.top/OMWqzw) |

    | Go                    | lonelyevil/khl                     |
    [仓库链接](https://github.com/lonelyevil/khl)                     |
    [服务器邀请](https://kook.top/r5s1WO) |

    | Java                  | FightingGuys/rabbit（停止维护）    |
    [仓库链接](https://github.com/FightingGuys/rabbit)                |
    [服务器邀请](https://kook.top/O9A5AY) |

    | Java                  | DeeChael/Kaiheila.java             |
    [仓库链接](https://github.com/DeeChael/Kaiheila.java)             |
    [服务器邀请](https://kook.top/9RB96R) |

    | Java                  | Enaium/kook-spring-boot-starter    |
    [仓库链接](https://github.com/Enaium/kook-spring-boot-starter)    |
    [服务器邀请](https://kook.top/YaP12f) |

    | Java                  | SNWCreations/JKook                 |
    [仓库链接](https://github.com/SNWCreations/JKook)                 |
    暂无                                  |

    | C#                    | PoH98/KHLSharp                     |
    [仓库链接](https://github.com/PoH98/KHLBotSharp)                  |
    暂无                                  |

    | C#                    | gehongyan/KaiHeiLa.Net             |
    [仓库链接](https://github.com/gehongyan/KaiHeiLa.Net)             |
    [服务器邀请](https://kook.top/EvxnOb) |

    | Kotlin & Java         | KookyBot/KookyBot                  |
    [仓库链接](https://github.com/KookyBot/KookyBot)                  |
    [服务器邀请](https://kook.top/wnWOP9) |

    | Kotlin & Java         | simple-robot/simbot-component-kook |
    [仓库链接](https://github.com/simple-robot/simbot-component-kook) |
    暂无                                  |


    ### 机器人


    机器人是增加聊天乐趣和提升管理服务器效率的新方式。你可以通过调整机器人的[亲密度](https://developer.kookapp.cn/bot)设置，来赋予它们独特的生命力，让它们与用户产生更为亲密的交互。当然你也可以创造一个严肃的管理机器人，或将他变成任何你想象中的样子，充分发挥你的想象力，让你的机器人变得与众不同！


    快去创建一个属于你的[机器人](https://developer.kookapp.cn/bot)吧！


    ### 隐私政策


    **更新日期：2020 年 12 月 9 日**


    **生效日期：2020 年 12 月 9 日**


    欢迎使用由**北京逍遥一下科技有限公司**（简称**“我们”**或**“KOOK”**）提供服务或运营控制的“KOOK”系列产品和服务，包括 KOOK
    应用程序、 KOOK 移动端产品和服务（以下简称“**本平台**”）。


    本隐私政策构成您与我们之间具法律约束力的协议，我们在此特别提醒您认真阅读、充分理解本协议各条款，特别是其中所涉及的免除、减轻我们责任的条款、对您权利限制条款、争议解决和法律适用等。**其中，限制、免责条款可能以黑体加粗或加下划线的形式提示您重点注意**。请您审慎阅读并选择接受或不接受本协议。若您不同意本隐私政策，请您停止访问或使用本平台。同时您也可以通过本隐私政策提供的联系方式与我们联系，我们将在我们的能力范围内配合您处理相关事宜。


    ### 用户信息


    ** KOOK API 不得用于以下用途：**


    - **未经 KOOK 用户的明确许可**，修改 KOOK 用户的账号信息。例如，未经用户允许，机器人主动将用户加入到一个新的服务器当中；

    - 替代 KOOK 用户**发送消息、上传文件或播放音频**；

    - 无论在何种情况下，**未经 KOOK 用户的明确许可**，**获取用户的密码或网页证书**。


    ### 数据信息


    ** KOOK API 不得用于以下用途：**


    - **抓取**任何 KOOK 数据；

    - 将 KOOK 的数据用于运营机器人以外的其他用途；

    - 未经用户明确许可，**分享**或**披露**任何用户的 KOOK 的相关数据；

    - 向任何**第三方**网络广告，数据服务商或其他**获利渠道**披露 KOOK 的相关数据；

    - **保留相关数据的时间**超出机器人正常运营所需要的时间；

    - 违反 KOOK 的**用户隐私政策**；

    - 获取 KOOK **用户密码**访问 KOOK 进行操作；

    - **出售，许可**或以**其他方式**将 KOOK 的数据商业化；

    - 以违反常识或违反用户预期的方式处理 KOOK 数据。


    ### 法律规定


    ** KOOK API 不得用于以下用途：**


    - 推送包含**违反法律规定的信息**（色情、赌博、毒品、政治、人身攻击、欺诈信息等）；

    - **导致死亡**，**人身伤害**或**破坏环境**等任何活动；

    - 鼓励或促进**非法活动**或侵犯**第三方权益**；

    - **诽谤**，**骚扰**，**跟踪**，**威胁他人**或以**其他方式**违反 KOOK **用户社区准则**。


    ### 滥用


    **允许：**


    - 要求您的最终用户**遵守**（非故意违反）法律、法规；

    - 仅允许使用**开发者平台文档中规定的方式**访问 KOOK 的 API


    **禁止**


    - **删除、模糊或更改** KOOK 的服务条款或这些条款中的任何**链接**、**通知**、**内容**；

    - **鼓励或为用户创建**违反 KOOK 服务条款的功能；

    - 将 API**转授权**给第三方使用；

    - 向 KOOK 的产品和服务中引入**任何病毒，蠕虫，缺陷，特洛伊木马，恶意软件**或**任何具有破坏性**的内容；

    - **逆向工程**或尝试从任何 API 或相关软件中**提取源代码**；

    - 使用**虚假**的身份登记、登录 KOOK 的开发者账户；

    - 鼓励或允许第三方**违反 KOOK 开发者隐私政策**；

    - **干扰**或**中断** KOOK 的 API 服务器或网络。


    ### 限制


    KOOK 规定了对 API 的**使用限制**（例如：单位时间内发送 API 请求的数量，机器人所在服务器的数量，机器人可以服务的用户数量）。

    如果您想使用超出此类限制的任何 API，必须获得 KOOK 的书面授权。


    ### 投诉与处罚规范


    KOOK 的机器人已启用用户投诉处理机制，我们会根据用户的投诉，视违规程度予以不同程度的处罚措施。


    我们理解你的违规行为可能基于失误、疏忽等过失，因此，若你的机器人存在不符合法律法规和平台规则等情形而被处理， KOOK
    提供了邮件申诉渠道，你可以对你的机器人进行整改后，通过申诉渠道重新向 KOOK 提交发布审核。


    ### 变更


    本隐私政策一旦发生任何重大变更，我们将尽合理努力向所有用户广而告之，例如通过在本平台上发布通知；但您应定期查看本隐私政策，以查看有关变更。我们还会更新本隐私政策顶部的“更新日期”和“生效日期”。您在本隐私政策更新之后继续访问或使用本平台，即视为您接受更新后的隐私政策。如果您不同意更新后的隐私政策，请您停止访问或使用本平台。


    ### 联系方式


    与本政策相关的任何疑问、意见或请求，请发送至

    [service@kookapp.cn](mailto:service@kookapp.cn)。

    一般情况下，我们会在收到您相关联系信息并核实您身份后的【15】日内回复。


    ### 其他


    （一）本隐私政策仅适用于您在中国大陆（仅为本条款之目的，不含香港、澳门、台湾地区）境内使用本平台服务的情形。本隐私政策可能存在多种语言版本，如各语言版本条款出现不一致或冲突，以中文版本为准。


    （二）本隐私政策中的标题仅为方便及阅读而设，并不影响本隐私政策中任何规定的含义或解释。


    ## 参考


    KOOK 的 API 正常分为两个核心层：


    - 常规的 http 接口，你可以用它来做一些常规操作。

    - 消息实时通知，你可以通过（webhook/websocket）来订阅系统的实时消息及事件，然后做出相应的操作等。


    通过上述两层的接口，我们可以在 KOOK 中做出机器人，或者提供服务等。


    ### 常规 http 接口规范


    #### BaseUrl


    ```

    https://www.kookapp.cn/api

    ```


    #### API 版本管理


    KOOK 后续可能会有不同版本的 API。您可以通过像 `https://www.kookapp.cn/api/v{version_number}`
    这样在请求路径中明确指定所要使用的 API 版本。如果省略掉 version_number, 它会指向默认的版本。目前支持的版本列表如下所示：


    | 版本 | 状态   | 默认 |

    | ---- | ------ | ---- |

    | 3    | 开发中 | 是   |


    #### 鉴权


    在开发者中心，在创建机器人后，我们可以得到一个 token，在请求所有的 KOOK 接口时，我们需要在 http header 的
    `Authorization` 中加入该 token 以进行鉴权,格式为 `Authorization: TOKEN_TYPE
    TOKEN`。目前支持两种格式的鉴权：


    - 机器人。TOKEN_TYPE = Bot。

    - Oauth2。TOKEN_TYPE = Bearer。


    如下为机器人的鉴权示例:


    ```

    Authorization: Bot BHsTZ4232tLatgV5AFyjoqZGAHHmpl9mTxYQ/u4/80=

    ```


    #### 速度限制


    为了保护我们的系统，我们在 [RFC 6585](https://tools.ietf.org/html/rfc6585#section-4)
    的基础上做了一些扩展，来限制用户的接口调用速度。经常达到限速阀值或者忽略速度限制的 API 用户将会被撤销 API
    密钥，并且被限制登录。有关速度限制的问题，请参阅[速率限制](https://developer.kookapp.cn/doc/rate-limit)一节


    #### i18N


    如果希望本地化，可以在 http 头中加入 `Accept-Language` 头，如下为一个示例：


    ```

    Accept-Language: en-us

    ```


    系统如果支持该语言，系统会以该语言返回错误消息等。如果系统不支持，系统会以默认的 zh-cn 来返回接口的消息，提示等。


    #### 接口格式及返回说明


    - 接口分为 GET 请求和 POST 请求，所有找服务器拿数据均使用 GET 请求，提交数据给服务器使用 POST 请求

    - POST 请求若无特殊说明，均为 POST JSON 格式，即在 http header 中加入`Content-type:
    application/json`，并将数据以 json 字符串传递。

    - 所有的接口返回如下的格式：


    ```javascript

    {
        "code" : 0, // integer, 错误码，0代表成功，非0代表失败，具体的错误码参见错误码一览
        "message" : "error info", // string, 错误消息，具体的返回消息会根据Accept-Language来返回。
        "data" : [], // mixed, 具体的数据。
    }

    ```


    #### 接口字段说明


    由于一些历史原因，接口中可能会有一些不在文档中的字段，请大家务必使用文档中的字段，不在文档中的字段后续可能会更改。


    #### 请求参数


    在 KOOK 整个 API 体系中，有一些参数是一致的，会在此处统一列出，后续不会再单独详细说明。


    正常的列表页，一般会有类似如下的参数：


    | 参数名    | 类型   | 区域 |
    说明                                                                                                                  
    |

    | --------- | ------ | ---- |
    ----------------------------------------------------------------------------------------------------------------------
    |

    | page      | int    | GET  |
    列表页中有，代表页                                                                                                    
    |

    | page_size | int    | GET  | 列表页中有，每页数据大小，默认为 50, 常规情况下 page_size 最大为
    50                                                    |

    | sort      | string | GET  | 代表排序的字段,
    比如`-id`代表`id`按`DESC`排序，`id`代表`id`按`ASC`排序。不一定有, 如果有，接口中会声明支持的排序字段。 |


    正常的列表页的返回参数会保持如下的格式:


    | 参数名       | 类型  |
    说明                                                                    |

    | ------------ | ----- |
    ----------------------------------------------------------------------- |

    | items        | Array |
    数据列表                                                                |

    | meta         | Map   |
    分页的信息                                                              |

    | » page       | int   |
    页码                                                                    |

    | » page_total | int   |
    总页数                                                                  |

    | » page_size  | int   |
    每一页的数据                                                            |

    | » total      | int   |
    总数据量                                                                |

    | sort         | Map   | 分页的排序, key:+-1, 如果为 1 代表按 key 升序，如果为-1 代表按 key 降序 |


    ### 消息通知


    消息通知在整个 KOOK 体系中比较复杂，我们目前支持两种消息通知机制：


    - [Webhook](https://developer.kookapp.cn/doc/webhook)

    - [Websocket](https://developer.kookapp.cn/doc/websocket)


    不论是以何种方式来接受消息，它们都遵循着相同的规范：


    - 消息推送时，可能会有压缩(压缩默认采用 zlib 压缩【deflate】)。

    - 消息的含义，结构格式等基本保持一致。


    ## 速率限制


    为了防止接口滥用和超速，我们会通过速率限制来限制 API 接口请求。


    ### http 头格式


    在每个 API 请求中，我们会在需要速率控制的请求的 http 响应的 header 中，包含如下的速度控制的头：


    ```

    // 一段时间内允许的最大请求次数

    X-Rate-Limit-Limit: 5

    // 一段时间内还剩下的请求数

    X-Rate-Limit-Remaining: 0

    // 回复到最大请求次数需要等待的时间

    X-Rate-Limit-Reset: 14

    // 请求数的bucket

    X-Rate-Limit-Bucket: user/info

    // 触犯全局请求次数限制

    X-Rate-Limit-Global

    ```


    ### 超速响应


    当触犯速度限制时，系统会返回 http 429 响应。返回的消息格式与标准格式也是一致的。同时，上文中提到的 http 头也依旧会传。


    ### 封禁措施


    如果多次超速，系统会发出警告信息。bot 需要按照 rate limit 的头进行速度控制。  

    如果多次警告后依然不更改，系统可能会禁用 bot。
tags:
  - name: 将Bot连接到 KOOK 服务器
    description: 使用Websocket或Webhook将Bot连接至服务器
  - name: KMarkdown与卡片消息
    description: >
      # KMarkdown


      在发送聊天消息时，为了支持用户的复杂的消息需求，以及有更好的用户体验，我们引入了 markdown，同时，基于 markdown
      的标准规范，我们加入了自己的一些适配和扩展。为了与 markdown 进行区分，在本文档中，我们统一称之为 KMarkdown。


      我们仅支持在文档中的一些语法，如果某个语法在 markdown 中，但是却没在文档中提及，那么它属于我们目前不支持的语法，建议用户不要使用。


      我们还提供了 kmarkdown
      消息编辑器，方便可视化编辑：[点击使用](https://kookapp.cn/tools/message-builder.html#/kmarkdown)


      ## 主要格式规范


      1. 语法来源大部分来自于默认的 markdown 语法。如果无特殊说明，用户只需遵守 markdown 语法即可。

      2. 自定义的语法大部分会保证这样的格式：`(tagName)value(tagName)[attributes]`, 如果这个标签没有属性，那么
      `[attributes]` 会被省略。

      3. 大部分标签都支持换行。


      | 格式                                   | 语法来源 |
      说明                                                                                                                                                     
      |

      | -------------------------------------- | -------- |
      ---------------------------------------------------------------------------------------------------------------------------------------------------------
      |

      | `**加粗文字**`                         | markdown |
      加粗                                                                                                                                                     
      |

      | `*斜体文字*`                           | markdown |
      斜体                                                                                                                                                     
      |

      | `***加粗斜体***`                       | markdown |
      加粗斜体                                                                                                                                                 
      |

      | `~~删除线~~`                           | markdown |
      删除线                                                                                                                                                   
      |

      | `[链接文字](链接地址)`                 | markdown | 链接，仅允许 http, https
      的链接。如果我们希望链接在下面显示缩略图(即链接解析)，需要保证链接文字与链接地址完全一致才可以                                  
      |

      | `---`                                  | markdown |
      分隔线                                                                                                                                                   
      |

      | `> hello world`                        | markdown |
      引用：换行会一直作用，直到遇见两个换行(\n\n),这两个换行实际不会显示换行                                                                                  
      |

      | `(ins)下划线内容(ins)`                 | 自定义   |
      下划线                                                                                                                                                   
      |

      | `(spl)剧透(spl)`                       | 自定义   |
      内容默认是遮住的，只有用户点击才会显示                                                                                                                   
      |

      | `:emoji:`                              | emoji    | 基本与 emoji 的
      [shortcode](https://www.webfx.com/tools/emoji-cheat-sheet/) 写法保持一致, [KOOK
      表情 json 文件](https://img.kookapp.cn/assets/emoji.json) |

      | `(emj)服务器表情名(emj)[服务器表情id]` | 自定义   |
      服务器表情，需要有服务器发送服务器表情的权限                                                                                                             
      |

      | `(chn)频道ID(chn)`                     | 自定义   |
      频道，提及频道                                                                                                                                           
      |

      | `(met)用户id/here/all(met)`            | 自定义   | @用户，all 代表 @所有用户，here 代表
      @所有在线用户                                                                                                       
      |

      | `(rol)角色ID(rol)`                     | 自定义   |
      @某角色所有用户                                                                                                                                          
      |

      | `` `行内代码` ``                       | markdown |
      行内代码                                                                                                                                                 
      |

      | ` ```语言\n ``` `                      | markdown |
      代码块                                                                                                                                                   
      |

      | `\特殊字符`                            | markdown |
      转义，比如将命中语法的特殊字符原样显示                                                                                                                   
      |


      # 卡片消息


      卡片消息是结构化的消息,可以提供一个易用、统一的富交互形式。


      我们还提供了卡片消息编辑器，方便可视化编辑：[点击使用](https://kookapp.cn/tools/message-builder.html#/card)


      ## 整体结构说明


      cardmessage 主要由 json 构成，在卡片消息中，有四种类别的卡片结构：


      - 卡片，目前只有 card。

      - 模块，主要有 section, header, context 等。

      - 元素：主要有 plain-text, image, button 等。

      - 结构：目前只有 paragraph。


      ### 消息的主要结构


      - 一个卡片消息最多只允许 5 个卡片

      - 一个卡片可以有多个模块，但是一个卡片消息总共不允许超过 50 个模块


      ```javascript

      [
        {
          type: 'card',
          //...
          modules: [
            // ...
          ],
        },
        // 其它card
      ];

      ```


      ### 主要结构说明


      所有的元素都有相似的结构，大体如下：


      ```javascript

      {
          "type" : "类别"，
          "foo" : "bar",   //属性参数
          "modules|elements|fields": [], //子元素，根据type类别有不同的值，卡片的为modules,模块的子元素为elements,结构的为fields。
      }

      ```


      ### 一些全局字段说明


      在很多结构中，有一些字段都是一样的，因此在此处说明，后面就不单独说明了：


      | 字段  | 类型   |
      说明                                                                                                               
      |

      | ----- | ------ |
      -------------------------------------------------------------------------------------------------------------------
      |

      | theme | string | 主题，可选的值为：primary, success, danger, warning, info,
      secondary, none.默认为 primary，为 none 时不显示侧边框。 |

      | size  | string | 大小，可选值为：xs, sm, md, lg, 一般默认为
      lg                                                                       |


      ### 卡片消息发送说明


      在消息发送时，卡片消息的发送类型为`10`, 在发送时，content 字段为 json 的字符串。详情参见消息发送接口。发送前请调用各语言自带的
      json 序列化方法进行序列化再进行发送，直接发送未经序列化的 json 字符串通常会产生错误。


      ### 关于卡片中包含的媒体


      **如果卡片中包含第三方媒体链接，我们将会自行转存媒体后再完成发送。**由于访问速度等各种原因，很容易产生失败。推荐大家优先调用 asset
      接口上传媒体文件后再进行发送，以防由于转存失败导致卡片发送不成功。  

      另外，最大家注意下多媒体的内容，如果有涉黄涉政等内容，可能会导致机器人被封禁，请谨慎对待。


      ## 卡片


      ### card


      **主要结构**：


      ```javascript

      {
          "type": "card",
          "theme" : "primary|warning|danger|info|none...", // 卡片风格，默认为primay
          "color":"#aaaaaa", //色值
          "size": "sm|lg", //目前只支持sm与lg, 如果不填为lg。 lg仅在PC端有效, 在移动端不管填什么，均为sm。
          "modules": [
              // modules...
          ]
      }

      ```


      **说明：**


      - modules 只能为模块

      - 单个 card 模块数量不限制，但是总消息最多只能有 50 个模块

      - theme, size 参见[全局字段说明](#一些全局字段说明),卡片中，size 只允许 lg 和 sm

      - color 代表卡片边框具体颜色，如果填了，则使用该 color，如果未填，则使用 theme 来渲染卡片颜色。


      ## 模块


      ### 标题模块


      **作用说明：** 标题模块只能支持展示标准文本（text），突出标题样式。  

      **主要结构：**


      ```javascript

      {
          "type": "header",
          "text" : {
              "type": "plain-text",
              "content": "标题1"
          }
      }

      ```


      **说明：**


      - text 为文字元素且 content 不能超过 100 个字


      ### 内容模块


      **作用说明：** 结构化的内容，显示文本+其它元素。  

      **主要结构：**


      ```javascript

      {
          "type": "section",
          "mode" : "left|right", //accessory在左侧还是在右侧
          "text" : {
              "type": "plain-text|kmarkdown|paragraph",
              //...
          },
          "accessory": {
              "type": "image|button",
              //...
          }
      }

      ```


      **说明：**


      - text 可以为 plain-text, kmarkdown 或者 paragraph

      - accessory 可以为 image 或者 button

      - button 不能放置在左侧

      - mode 代表 accessory 是放置在左侧还是在右侧


      ### 图片组模块


      **作用说明：** 1 到多张图片的组合  

      **主要结构：**


      ```javascript

      {
          "type" : "image-group",
          "elements": [
              //图片元素，其它元素无效
          ],
      }

      ```


      **说明：**


      - elements 只能有 image 元素，只能有 1-9 张图片


      ### 容器模块


      **作用说明：** 1 到多张图片的组合，与图片组模块不同，图片并不会裁切为正方形。多张图片会纵向排列。  

      **主要结构：**


      ```javascript

      {
          "type" : "container",
          "elements": [
              //图片元素，其它元素无效
          ],
      }

      ```


      **说明：**


      - elements 只能有 image 元素，只能有 1-9 张图片


      ### 交互模块


      **作用说明：** 交互模块中包含交互控件元素，目前支持的交互控件为按钮（button）  

      **主要结构：**


      ```javascript

      {
          "type": "action-group",
          "elements": [
              // buttons
          ],
      }

      ```


      **说明：**


      - elements 中只能为 button

      - elements 最多只能有 4 个


      ### 备注模块


      **作用说明：** 展示图文混合的内容。  

      **主要结构：**


      ```javascript

      {
          "type": "context",
          "elements": [],
      }

      ```


      **说明：**


      - elements 中可以为：plain-text, kmarkdown, image

      - elements 最多可包含 10 个元素


      ### 分割线模块


      **作用说明：** 展示分割线。  

      **主要结构：**


      ```javascript

      {
          "type": "divider",
      }

      ```


      ### 文件模块


      **作用说明：** 展示文件，目前有三种，文件，视频和音频。  

      **主要结构：**


      ```javascript

      {
          "type": "file|audio|video",
          "src": "", //文件|音频|视频地址
          "title": "标题",
          "cover": "" //封面图
      }

      ```


      规则：


      - cover 仅在音频的时候有效，是音频的封面图。


      ### 倒计时模块


      **作用说明：** 展示倒计时。  

      **主要结构：**


      ```javascript

      {
          "type": "countdown",
          "endTime" : 1608819168000, //到期的毫秒时间戳
          "startTime" : 1608819168000, //起始的毫秒时间戳，仅当mode为second才有这个字段
          "mode" : "day,hour,second", //倒计时样式, 按天显示，按小时显示或者按秒显示
      }

      ```


      规则：


      - mode 主要是倒计时的样式，目前支持三种样式。

      - startTime 和 endTime 为毫秒时间戳，startTime 和 endTime 不能小于服务器当前时间戳。


      ### 邀请模块


      **作用说明：** 提供服务器邀请/语音频道邀请

      **主要结构：**


      ```json

      { "type": "invite", "code": "邀请链接或者邀请码" }

      ```


      ## 元素


      ### 普通文本


      **作用说明：** 显示文字。  

      **主要结构：**


      ```javascript

      {
          "type": "plain-text",
          "content" : "",
          "emoji": true|false,
      }

      ```


      **规则：**


      - emoji 为布尔型，默认为 true。如果为 true,会把 emoji 的 shortcut 转为 emoji

      - 为了方便书写，所有 plain-text 的使用处可以简单的用字符串代替。

      - 最大 2000 个字


      ```javascript

      // "hello world" 等价于：

      {
          "type" : "plain-text",
          "emoji": true,
          "content" : "hello world",
      }

      ```


      ### kmarkdown


      **作用说明：** 显示文字。  

      **主要结构：**


      ```javascript

      {
          "type": "kmarkdown",
          "content" : "**hello**",
      }

      ```


      **规则：**


      - 最大 5000 个字


      ### 图片


      **作用说明：** 显示图片。  

      **主要结构：**


      ```javascript

      {
          "type": "image",
          "src" : "",
          "alt" : "",
          "size" : "sm|lg", // size只用在图文混排  图片组大小固定
          "circle" : true|false,
      }

      ```


      **规则：**


      - 图片类型（MimeType）限制说明：目前仅支持`image/jpeg`, `image/gif`, `image/png`这 3 种

      - 图片的 size 默认为 lg


      ### 按钮


      **作用说明：** 提供交互的功能


      ```javascript

      {
          "type": "button",
          "theme": "primary|warning|info|danger|...", //按钮的主题颜色
          "value": "", //要传递的value，为string
          "click": "", //click时的事件类型， return-val 返回value值
          "text": "",
      }

      ```


      - value 只能为 string

      - text 可以为 plain-text, kmarkdown

      - click 代表用户点击的事件,默认为""，代表无任何事件。
        - 当为 link 时，会跳转到 value 代表的链接;
        - 当为 return-val 时，系统会通过系统消息将消息 id,点击用户 id 和 value 发回给发送者，发送者可以根据自己的需求进行处理,消息事件参见[button 点击事件](https://developer.kookapp.cn/doc/event/user#Card%20消息中的%20Button%20点击事件)。私聊和频道内均可使用按钮点击事件。

      ## 结构体


      ### 区域文本


      **作用说明：** 支持分栏结构，将模块分为左右两栏，根据顺序自动排列，支持更自由的文字排版模式，提高可维护性  

      **主要结构：**


      ```javascript

      {
          "type": "paragraph",
          "cols": 3, //移动端忽略该参数
          "fields" : [
          ],
      }

      ```


      **规则：**


      - cols 是 int,可以的取值为 1-3

      - fields 可以的元素为 text 或 kmarkdown

      - paragraph 最多有 50 个元素
  - name: 服务器相关接口
    description: 服务器相关接口
  - name: 服务器频道相关接口
    description: 服务器频道相关接口
  - name: 频道消息相关接口
    description: 频道消息相关接口
  - name: 私聊会话
    description: 私聊会话相关接口
  - name: 私聊消息相关接口
    description: 私聊消息相关接口
  - name: 用户相关接口
    description: 用户相关接口
  - name: 服务器角色权限相关接口
    description: >-
      ## 权限说明


      权限是一个 unsigned int 值，由比特位代表是否拥有对应的权限。

      权限值与对应比特位进行按位与操作，判断是否拥有该权限。


      ```c

      // 判断是否有某权限。其中: permissions代表权限值，bitValue代表某权限比特位，1 << bitValue 代表某权限值。

      permissions & (1 << bitValue)  == (1 << bitValue);

      ```


      数据位的说明如下：


      | 比特位 | 值        | 权限               |
      说明                                                                                                      
      |

      | ------ | --------- | ------------------ |
      ----------------------------------------------------------------------------------------------------------
      |

      | 0      | 1         | 管理员             |
      拥有此权限会获得完整的管理权，包括绕开所有其他权限（包括频道权限）限制，属于危险权限。                     |

      | 1      | 2         | 管理服务器         |
      拥有此权限的成员可以修改服务器名称和更换区域。                                                            
      |

      | 2      | 4         | 查看管理日志       |
      拥有此权限的成员可以查看服务器的管理日志。                                                                
      |

      | 3      | 8         | 创建服务器邀请     |
      能否创建服务器邀请链接                                                                                    
      |

      | 4      | 16        | 管理邀请           |
      拥有该权限可以管理服务器的邀请                                                                            
      |

      | 5      | 32        | 频道管理           |
      拥有此权限的成员可以创建新的频道以及编辑或删除已存在的频道。                                              
      |

      | 6      | 64        | 踢出用户          
      |                                                                                                           
      |

      | 7      | 128       | 封禁用户          
      |                                                                                                           
      |

      | 8      | 256       | 管理自定义表情    
      |                                                                                                           
      |

      | 9      | 512       | 修改服务器昵称     |
      拥有此权限的用户可以更改他们的昵称。                                                                      
      |

      | 10     | 1024      | 管理角色权限       |
      拥有此权限成员可以创建新的角色和编辑删除低于该角色的身份。                                                
      |

      | 11     | 2048      | 查看文字、语音频道
      |                                                                                                           
      |

      | 12     | 4096      | 发布消息          
      |                                                                                                           
      |

      | 13     | 8192      | 管理消息           |
      拥有此权限的成员可以删除其他成员发出的消息和置顶消息。                                                    
      |

      | 14     | 16384     | 上传文件          
      |                                                                                                           
      |

      | 15     | 32768     | 语音链接          
      |                                                                                                           
      |

      | 16     | 65536     | 语音管理           |
      拥有此权限的成员可以把其他成员移动和踢出频道；但此类移动仅限于在该成员和被移动成员均有权限的频道之间进行。 |

      | 17     | 131072    | 提及@全体成员      |
      拥有此权限的成员可使用@全体成员以提及该频道中所有成员。                                                   
      |

      | 18     | 262144    | 添加反应           |
      拥有此权限的成员可以对消息添加新的反应。                                                                  
      |

      | 19     | 524288    | 跟随添加反应       |
      拥有此权限的成员可以跟随使用已经添加的反应。                                                              
      |

      | 20     | 1048576   | 被动连接语音频道   |
      拥有此限制的成员无法主动连接语音频道，只能在被动邀请或被人移动时，才可以进入语音频道。                     |

      | 21     | 2097152   | 仅使用按键说话     |
      拥有此限制的成员加入语音频道后，只能使用按键说话。                                                        
      |

      | 22     | 4194304   | 使用自由麦         |
      没有此权限的成员，必须在频道内使用按键说话。                                                              
      |

      | 23     | 8388608   | 说话              
      |                                                                                                           
      |

      | 24     | 16777216  | 服务器静音        
      |                                                                                                           
      |

      | 25     | 33554432  | 服务器闭麦        
      |                                                                                                           
      |

      | 26     | 67108864  | 修改他人昵称       |
      拥有此权限的用户可以更改他人的昵称                                                                        
      |

      | 27     | 134217728 | 播放伴奏           |
      拥有此权限的成员可在语音频道中播放音乐伴奏                                                                
      |



      **注意：** 正常角色由上向下排序，这个先后顺序是角色的优先级(position字段)。

      如果你有管理员权限，你只能管理优先级比自己低的用户，不能管理优先级等于或比自己高的用户。这个地方的逻辑举例来说是这样的：对于一个公司的hr来说，他是有招员工的权利也有开除员工的权利（类比于管理权限），但是他不能开掉老板，也不是招自己的boss。因此，在使用授予权限，更新等接口时，要注意一下，可能机器人虽然有管理权限，但是也不是什么角色都可以授予，也不是什么人都可以操作。
  - name: 服务器表情相关接口
    description: 服务器表情相关接口
  - name: 邀请相关接口
    description: 邀请相关接口
  - name: Gateway接口
    description: Gateway接口
  - name: 亲密度相关接口
    description: 亲密度相关接口
  - name: 附件相关接口
    description: 附件相关接口
  - name: 事件通知介绍
    description: "# 事件结构/格式说明\r\n\r\n当 websocket 或 webhook 收到 `s=0` 的消息时，代表当前收到的消息是事件(包含用户的聊天消息及系统的通知消息等)。本文会具体描述所有的事件类型，并且明确其字段的含义。开发者可以根据本文档做出相应的开发处理。\r\n\r\n## 事件基本结构及含义说明\r\n\r\n目前所有的消息都会有如下的结构：\r\n\r\n```json\r\n{\r\n  \"s\": 0, // 信令类型\r\n  \"d\": {} //数据\r\n}\r\n```\r\n\r\n本文主要讲述的是当 `s=0` 时，data 的数据结构，信令的具体含义参见[websocket](https://developer.kookapp.cn/doc/websocket).\r\n\r\n## 事件主要格式\r\n\r\n### 格式说明\r\n\r\n| 字段          | 类型   | 说明                                                                                               |\r\n| ------------- | ------ |--------------------------------------------------------------------------------------------------|\r\n| channel_type  | string | 消息通道类型, `GROUP` 为组播消息, `PERSON` 为单播消息, `BROADCAST` 为广播消息                                         |\r\n| type          | int    | 1:文字消息, 2:图片消息，3:视频消息，4:文件消息， 8:音频消息，9:KMarkdown，10:card 消息，255:系统消息, 其它的暂未开放                    |\r\n| target_id     | string | 发送目的, 频道消息类时, 代表的是频道 channel_id，如果 channel_type 为 `GROUP` 组播且 type 为 `255` 系统消息时，则代表服务器 guild_id |\r\n| author_id     | string | 发送者 id, 1 代表系统                                                                                   |\r\n| content       | string | 消息内容, 文件，图片，视频时，content 为 url                                                                    |\r\n| msg_id        | string | 消息的 id                                                                                           |\r\n| msg_timestamp | int    | 消息发送时间的毫秒时间戳                                                                                     |\r\n| nonce         | string | 随机串，与用户消息发送 api 中传的 nonce 保持一致                                                                   |\r\n| extra         | mixed  | 不同的消息类型，结构不一致                                                                                    |\r\n\r\n### 文字频道消息 extra 说明\r\n\r\n**当 type 非系统消息(255)时**\r\n\r\n| 字段          | 类型    | 说明                                                                             |\r\n| ------------- | ------- | -------------------------------------------------------------------------------- |\r\n| type          | int     | 同上面 type                                                                      |\r\n| guild_id      | string  | 服务器 id                                                                        |\r\n| channel_name  | string  | 频道名                                                                           |\r\n| mention       | Array   | 提及到的用户 id 的列表                                                           |\r\n| mention_all   | boolean | 是否 mention 所有用户                                                            |\r\n| mention_roles | Array   | mention 用户角色的数组                                                           |\r\n| mention_here  | boolean | 是否 mention 在线用户                                                            |\r\n| author        | Map     | 用户信息, 见[对象-用户 User](https://developer.kookapp.cn/doc/objects#用户User) |\r\n\r\n### 系统事件消息 extra 说明\r\n\r\n**当 type 为系统消息(255)时**\r\n\r\n| 字段 | 类型   | 说明                                         |\r\n| ---- | ------ | -------------------------------------------- |\r\n| type | string | 标识该事件的类型                             |\r\n| body | Map    | 该事件关联的具体数据, 详见各系统消息事件示例 |\r\n"
  - name: 消息相关事件
    description: |
      消息相关事件
  - name: 频道相关事件
    description: 频道相关事件
  - name: 服务器相关事件
    description: 服务器相关事件
  - name: 用户相关事件
    description: 用户相关事件
  - name: 私聊相关事件
    description: 私聊相关事件
  - name: 服务器成员相关事件
    description: 服务器成员相关事件
paths:
  /kmarkdown:
    post:
      tags:
        - KMarkdown与卡片消息
      summary: 事件中的kmarkdown消息格式
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/kmarkdown'
  /cardMessage:
    post:
      tags:
        - KMarkdown与卡片消息
      summary: 事件中的卡片消息格式
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/card'
  /event:
    post:
      tags:
        - 事件通知介绍
      summary: 事件结构示例
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/basic-2'
  /message-object:
    post:
      tags:
        - 标准对象格式
      summary: 消息对象
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/kmarkdown'
                - $ref: '#/components/schemas/card'
                - $ref: '#/components/schemas/image'
                - $ref: '#/components/schemas/video'
                - $ref: '#/components/schemas/file'
  /connect-websocket:
    get:
      tags:
        - 将Bot连接到 KOOK 服务器
      summary: 使用Websocket进行连接
      description: >
        通过 Websocket，客户端可以与 KOOK 进行实时通信，来接收事件和数据。websocket
        的协议交互非常复杂，而且较差的实现会给服务端和客户端都带来较大困扰，因此建议你在编写自己的实现时，详细阅读本文档。


        **重要提示：** 并不是所有的字段都有文档记录，你应该依赖文档，而不是依赖接口中的字段。我们可能随时更改不在文档中的字段。


        **注意：** Webhook 模式与 Websocket 模式是互斥的，如果选择了 Webhook 模式，将不能再使用 Websocket
        接收用户消息。同理，设置了 Websocket 后，平台将不会再向回调地址推送消息。


        ## Gateway


        Gateway 是 websocket 的网关，客户端通过连接 Gateway 可以获取到相应的推送消息等。


        Gateway 的地址需要走 http
        接口获取，参见[Gateway](https://developer.kookapp.cn/doc/http/gateway)


        ## 消息压缩


        - 如果客户端连接中 `compress` 参数为 `1`, 所有方向为 `server->client`
        的消息都是经过压缩后的`binary` 类型的消息.

        - 与 Webhook 保持一样，默认情况下，我们的数据会进行 zlib 压缩 (deflate)，相应的数据你可能需要先进行 zlib
        解压缩，再进行处理。如果不需要压缩，可以在获取 gateway 时加上参数`compress=0`。

        - 客户端发给服务端的消息不要压缩。


        ## 连接流程


        常规连接流程如下：


        1. 获取 Gateway

        2. 连接 Gateway。如果连接失败，回退到第 1 步。

        3. 收到 hello 包，如果成功，开始接收事件。如果失败，回退至第 1 步。

        4. 在连接中，每隔 30 秒发一次心跳 ping 包，如果 6 秒内，没有收到心跳 pong 包，则超时。进入到指数回退，重试。

        5. 先发两次心跳 ping(间隔为 2,4),判断连接是否成功。如果成功，则连接恢复。

        6. 如果不成功，再回退到第 2 步，尝试两次 resume(间隔为 8,16)。如果成功，会按正常往下走，但有一个 resume
        过程（同步中间的离线消息），resume 完了，会收到一个 resumeOK 包。

        7. 如果失败，再回到第 1 步，尝试无数次获取 Gateway(指数倒退，最大间隔为 60),直到成功为止。

        8. 任何时候，收到 reconnect 包，应该将当前消息队列，`sn`等全部清空，然后回到第 1 步，否则可能会有消息错乱等各种问题。


        ### 关于重连


        当 WebSocket 链接彻底中断, 尝试重新建立链接并恢复, 需要在已断开的链接 url 后继续拼接以下参数:  

        resume : 固定值 1  

        sn : 当前客户端处理成功的最后一条消息的 sn, 没有收到过任何消息传 0。需自行记录（可保存至文件，以实现代码升级重启后恢复会话）。  

        session_id: 前一个链接中的 session_id , 参考 [信令 1 握手结果](#信令[1]%20HELLO)


        ```

        wss://test.kookapp.com:8888/gateway?{compress/token
        parameters}&resume=1&sn=5&session_id=20****ae-1fa4-4d19-805f-6f0f****d534

        ```


        连接流程示意图：

        ![image](/img/state.png)


        参考代码:
        [php-bot](https://github.com/kaiheila/php-bot/blob/main/src/base/StateSession.php)


        ## 信令格式


        ### 信令基本格式


        ```javascript

        {
            "s" : 1,  // int, 信令，详情参照信令说明
            "d" : {}, // 数据字段mixed
            "sn" : 0, // int, 该字段并不一定有，只在s=0时有，与webhook一致。
        }

        ```


        具体参见[Event](https://developer.kookapp.cn/doc/event/event-introduction)


        ### 信令说明


        | 信令 | 方向           | 说明                                      |

        | ---- | -------------- | ----------------------------------------- |

        | 0    | server->client | 消息(包含聊天和通知消息)                  |

        | 1    | server->client | 客户端连接 ws 时, 服务端返回握手结果      |

        | 2    | client->server | 心跳，ping                                |

        | 3    | server->client | 心跳，pong                                |

        | 4    | client->server | resume, 恢复会话                          |

        | 5    | server->client | reconnect, 要求客户端断开当前连接重新连接 |

        | 6    | server->client | resume ack                                |


        ## 信令[1] HELLO


        **方向：** server->client  

        **说明：** 当我们成功连接 websocket 后，客户端应该在 6s 内收到该包，否则认为连接超时。  

        **成功示例：**


        ```javascript

        {
            "s": 1,
            "d": {
                "code": 0,
                "session_id": "xxxx"
            }
        }

        ```


        **失败：**


        | 状态码 | 含义           | 备注         |

        | ------ | -------------- | ------------ |

        | 40100  | 缺少参数       |              |

        | 40101  | 无效的 token   |              |

        | 40102  | token 验证失败 |              |

        | 40103  | token 过期     | 需要重新连接 |


        **示例：**


        ```javascript

        {
            "s": 1,
            "d": {
                "code": 40103
            }
        }

        ```


        ## 信令[0] EVENT


        **方向：** server->client  

        **说明：** 在正常连接状态下，收到的消息事件等。  

        **参数列表：**


        具体参见[Event](https://developer.kookapp.cn/doc/event/event-introduction)


        **注意：** 该消息会有 `sn`, 代表消息序号, 针对当前 `session` 的消息的序号, 客户端需记录该数字,并按顺序接收消息，
        **resume** 时需传入该参数才能完成。


        **示例：**


        ```javascript

        {
            "s": 0,
            "d": {
                // 参见event
            },
            "sn": 1000
        }

        ```


        **注意事项：**


        1. 收到消息时需要按照 `sn` 顺序处理, 服务端会尽可能保证 `sn` 的顺序性

        2. 假设收到消息的 `sn` 出现乱序, 需要先存入暂存区 (`buffer`) 等待正确的 `sn` 消息处理后再从暂存区顺序处理

        3. 假设收到了一条已处理过的 `sn` 的消息, 则直接抛弃不处理

        4. 客户端需要存储当前已处理成功的最大的 `sn`, 待心跳 ping 时回传服务端, 如果服务端发现当前客户端最新处理成功的消息 `sn`
        落后于最新消息 (丢包等异常情况), 服务端将会按照客户端指定的 `sn` 将之后所有最新的消息重传给客户端.

        5. 消息内容与 webhook 保持一致


        ## 信令[2] PING


        **方向：** client -> server  

        **说明：** 每隔 30s(随机-5，+5),将当前的最大 `sn` 传给服务端,客户端应该在 6s 内收到 PONG, 否则心跳超时。  

        **参数列表：**


        | 参数 | 描述                              | 类型 | 必传 |

        | ---- | --------------------------------- | ---- | ---- |

        | sn   | 客户端目前收到的最新的消息 **sn** | int  | Y    |


        **示例：**


        ```javascript

        {
            "s": 2,
            "sn": 6
        }

        ```


        **注意事项：**


        1. 心跳间隔： 30 秒 + rand(-5,5)秒

        2. 如果发了 ping, 6 秒内没有收到 pong，我们应该进入到超时状态。


        ## 信令[3] PONG


        **方向：** server -> client  

        **说明：** 回应客户端发出的 ping  

        **示例：**


        ```javascript

        {
            "s": 3
        }

        ```


        ## 信令[4] RESUME


        当链接未断开时

        客户端需传入 当前收到的最后一个 sn 序号

        例:


        ```javascript

        {
            "s": 4,
            "sn": 100
        }

        ```


        ## 信令[5] RECONNECT


        **方向：** server->client


        **说明：** 服务端通知客户端, 代表该连接已失效, 请重新连接。客户端收到后应该主动断开当前连接。


        **注意：** 客户端收到该信令代表因为某些原因导致当前连接已失效, 需要进行以下操作以避免消息丢失.


        1. 重新获取 gateway;

        2. 清空本地的 sn 计数;

        3. 清空本地消息队列.


        | 状态码 | 描述                                                             
        |     |

        | ------ |
        ----------------------------------------------------------------- | ---
        |

        | 40106  | resume 失败, 缺少参数                                            
        |     |

        | 40107  | 当前 `session` 已过期 (resume 失败, PING 的 sn 无效)              |    
        |

        | 40108  | 无效的 `sn` , 或 `sn` 已经不存在 (resume 失败, PING 的 `sn` 无效) |     |


        **示例：**


        ```javascript

        {
            "s": 5,
            "d": {
                "code": 41008,
                "err": "Missing params"
            }
        }

        ```


        ## 信令[6] RESUME ACK


        **方向：** server->client  

        **说明：** 服务端通知客户端 resume 动作成功，中间所有离线消息已经全部发送成功  

        **示例：**


        ```javascript

        {
            "s": 6,
            "d": {
                "session_id": "xxxx-xxxxxx-xxx-xxx"
            }
        }

        ```
      responses:
        '200':
          description: 连接成功
  /connect-webhook:
    get:
      tags:
        - 将Bot连接到 KOOK 服务器
      summary: 使用Webhook进行连接
      description: >
        通过 Webhook
        进行消息订阅可以让你的应用或机器人能够及时响应用户的消息，在用户量较多的情况下，可以提供更好的并发性能控制。你需要的只是告诉我们该向哪里（URL）发送消息。当消息发生时，KOOK
        开放平台会以 HTTP POST 请求的方式将消息内容推送到你设置的回调地址。


        > **注意:** Webhook、Websocket 模式不能同时使用  

        > 如果选择了 Webhook 模式，将不能再使用 Websocket 接收用户消息。同理，设置了 Websocket
        后，平台将不会再向回调地址推送消息。


        ## 配置 Webhook

        ### 配置 WebHook 回调地址

        为了能够接收推送消息，首先你必须在开发者后台配置回调地址。当收到相应的触发消息时，开放平台会向该回调地址发送相应的 `HTTP POST`
        请求。  

        > **注意:** 每个应用/机器人只能配置一个请求网址，该应用/机器人在所有服务器的消息都会发送到这个地址。

        1. 在开发者后台，点击任意机器人进入机器人详情页面

        2. 进入`设置 > 机器人`

        3. 在 `机器人连接模式` 中选择 `WebHook`

        4. 填写 `Callback Url`


        ### 处理 Challenge 请求

        点击 '重试' 按钮或上线机器人时，开放平台将会向你配置的网址推送一个 `application/json` 格式的 POST 请求进行
        Challenge 验证。

        > **注意:** 开放平台向机器人推送的消息将会使用 `zlib (deflate)` 压缩，请先使用先使用 `zlib` 解压或在传入的
        callbackUrl 中加上 `compress=0` 停用压缩  
         
        > **注意:** 当配置消息加密时，请先参考[解密消息](#解密消息)解密消息。  


        ```json

        {
            "s": 0, // 信令类型
            "d": {
                "type": 255,
                "channel_type": "WEBHOOK_CHALLENGE", //表示这是一个验证请求 
                "challenge" : "bkes654x09XY" , //客户端需要原样返回
                "verify_token": "xxxxxx",   //机器人的token
            }
        }

        ```


        > **注意:** 启用消息加密时，你收到的请求会是以下这个画风。请先参考[解密消息](#解密消息)解密消息。  


        ```json

        {
            "encrypt": "adfw232sdssdfadfas98XX......" // 加密字符串，解密方法请看下方的消息解密模块
        }

        ```

        当你收到开放平台 POST 验证请求时，你需要解析出 `challenge` 值，并在 1s 内原样返回该 `challenge`
        值作为响应。响应示例如下：

        > **注意:** 无论你是否配置消息加密，你都应该返回以下响应。  


        ```javascript

        { 
            "challenge": "bkes654x09XY" // 应用需要原样返回的值 
        }

        ```


        ## 接收并响应事件


        当有消息发生时，开放平台将会通过 HTTP POST 请求发送 Json compress 格式的事件数据到你预先提供的回调地址。


        ### 注意事项


        1. 数据会进行 `zlib (deflate)` 压缩，请先使用先使用 `zlib` 解压或在传入的 callbackUrl 中加上
        `compress=0` 停用压缩 

        2. 在 1s 内对推送事件请求返回 http 200 响应。如果失败或超时，系统会按 2s, 4s, 8s, 16s, 32, 64s
        的大致间隔，给你回调，直到 5 次都失败。

        3. 检查 `sn` 确保事件的唯一性，避免同一个事件处理了多次。

        4. 检查 'verify_token' 是否与开发者后台的 `verify_token` 相同，确保这个事件的来源确实是 KOOK
        开放平台，而不是恶意的第三方伪造的事件。

        5. 在配置好 WebHook
        后，系统会认为机器人自动上线。如果一段时间内，用户的失败次数达到警告阀值，系统会发送站内消息给相应开发者。如果失败次数过多，平台会认为机器人出现故障，平台会给开发者发送站内消息，并下线该机器人。机器人下线后，平台会停止向该机器人发送任何消息。用户在排除故障后，可以在开发者后台，重新点击上线，恢复该机器人。在恢复时，系统会再次重复之前的验证
        Url 流程，来确保该 Url 依然属于您。

        6. 如果需要更安全的事件回调机制，建议配置消息加密，请参考[配置消息加密](#配置消息加密)。


        ## 消息格式及说明

        参见[事件格式说明](https://developer.kookapp.cn/doc/event)


        ## 配置消息加密

        如果你对消息有较高的安全需求，可以通过 Encrypt Key 来加密数据。

        ### 配置消息加密 Encrypt Key


        1. 进入 `机器人连接模式` 配置

        2. 输入 `Encrypt Key` 或点击 `重新生成` 生成 `Encrypt Key`


        当你配置好消息加密，你收到的请求应该是这样子的:

        ```json

        {
            "encrypt": "adfw232sdssdfadfas98XX......" // 加密字符串，解密方法请看下方的消息解密模块
        }

        ```


        ### 解密消息

        事件消息采用了 aes-256-cbc 来加密数据。主要解密逻辑如下：

        > **注意:** 在启用数据加密后，推送的消息依然会使用 `zlib (deflate)` 压缩，请先使用 `zlib` 解压或在传入的
        callbackUrl 中加上 Url Query 参数 `compress=0` 停用压缩  


        > **注意:** 解密后的内容为事件 json

        1. 将密文用 `base64` 解码

        2. 截取前16位得到 `iv`, 截取16位之后的数据为新的密文

        3. 用 `base64` 解码新的密文, 得到待解密数据

        4. 在 `encrpytKey` 后面补 `\0` 至长度等于 32 位，得到 `key`

        5. 利用上面的 `iv`, `key`, 待解密数据，采用 `aes-256-cbc` 解密数据。


        ## 代码示例

        ### Python 代码示例


        ```python

        from Crypto.Cipher import AES

        import base64


        class Encrypt:
            def __init__(self, key, bs=32):
                pad = lambda s: s + (bs-len(s))*"\0"
                key = pad(key)
                self.key = key.encode('utf-8')

            def aes_decrypt(self, content):
                str = base64.b64decode(content)
                iv = str[0:16]
                cipher = AES.new(self.key, AES.MODE_CBC, iv)
                return cipher.decrypt(base64.b64decode(str[16:])).decode('utf-8')
        ```

        ### PHP 代码示例


        ```php

        $encryptKey = "testKey";

        $data = "kookapp's bot is awesome";

        $encrypt = encryptData($data, $encryptKey);

        echo $encrypt. "\n";

        echo decryptData($encrypt, $encryptKey);


        function encryptData($data, $key)

        {
            $iv = substr(md5(uniqid()), 0, 16);
            return base64_encode($iv.openssl_encrypt($data, 'aes-256-cbc', $key, 0, $iv));
        }


        function decryptData($eData, $key)

        {
            $eData = base64_decode($eData);
            $iv = substr($eData, 0, 16);
            return openssl_decrypt(substr($eData, 16), 'aes-256-cbc', $key, 0, $iv);
        }

        ```

        ### C# 代码示例

        ```csharp

        using System.Security.Cryptography;

        using System.Text;


        namespace YourBot

        {
            public class CryptUtil
            {
                public static string Decrypt(string data, string encryptKey)
                {
                    // 在 encrypKey 右侧填充 \0 到 32 位
                    encryptKey = encryptKey.PadRight(32, '\0');

                    // 用 base64 解析原密文
                    var originCipher = Encoding.UTF8.GetString(Convert.FromBase64String(data));
                    // 取前 16 位为 iv，16 位后的文本为新密文
                    var iv = originCipher.Substring(0, 16);
                    var newCipher = originCipher.Substring(16);

                    // 用 base64 解密新密文
                    var newCipherByte = Convert.FromBase64String(newCipher);

                    // 使用 aes-256-cbc 解密数据
                    using (var aes = Aes.Create())
                    {
                        aes.Key = Encoding.UTF8.GetBytes(encryptKey);
                        aes.IV = Encoding.UTF8.GetBytes(iv);

                        ICryptoTransform decryptor = aes.CreateDecryptor(aes.Key, aes.IV);

                        using (var memoryStream = new MemoryStream(newCipherByte))
                        using (var csDecrypt = new CryptoStream(memoryStream, decryptor, CryptoStreamMode.Read))
                        using (var reader = new StreamReader(csDecrypt))
                            return reader.ReadToEnd();
                    }
                }
            }
        }

        ```
      responses:
        '200':
          description: 连接成功
  /guild/list:
    get:
      tags:
        - 服务器相关接口
      summary: 获取当前用户加入的服务器列表
      description: ''
      operationId: getJoinedGuilds
      parameters:
        - $ref: '#/components/parameters/PageNumberParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - name: sort
          in: query
          description: 代表排序的字段, 比如-id代表id按DESC排序，id代表id按ASC排序。不一定有, 如果有，接口中会声明支持的排序字段。
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/PaginationInfo'
                          - type: object
                            properties:
                              items:
                                type: array
                                items:
                                  $ref: '#/components/schemas/_index_basic'
  /guild/index:
    get:
      deprecated: true
      tags:
        - 服务器相关接口
      summary: 获取当前用户加入的服务器列表
      description: ''
      parameters: []
      operationId: getJoinedGuildsOld
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_index_basic'
  /guild/view:
    get:
      tags:
        - 服务器相关接口
      summary: 获取服务器详情
      operationId: getGuildById
      parameters:
        - $ref: '#/components/parameters/GuildIdParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        allOf:
                          - $ref: '#/components/schemas/_index_basic'
                        properties:
                          roles:
                            type: array
                            description: 服务器的角色列表
                            items:
                              $ref: '#/components/schemas/role_basic'
                          channels:
                            description: 服务器的频道列表
                            type: array
                            items:
                              $ref: '#/components/schemas/_index_basic-2'
  /guild/user-list:
    get:
      tags:
        - 服务器相关接口
      summary: 获取服务器的用户列表
      operationId: getUsersInGuild
      parameters:
        - $ref: '#/components/parameters/GuildIdParam'
        - $ref: '#/components/parameters/GuildChannelIdParam'
          required: false
        - name: search
          in: query
          description: 搜索关键字，在用户名或昵称中搜索
          schema:
            type: string
        - name: role_id
          in: query
          description: 角色 ID，获取特定角色的用户列表
          schema:
            type: integer
        - $ref: '#/components/parameters/MobileVerifiedParam'
        - name: active_time
          in: query
          description: 根据活跃时间排序，`0`是顺序排列，`1`是倒序排列
          schema:
            type: integer
        - name: joined_at
          in: query
          description: 根据加入时间排序，`0`是顺序排列，`1`是倒序排列
          schema:
            type: integer
        - $ref: '#/components/parameters/PageNumberParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - name: filter_user_id
          in: query
          description: 获取指定id所属用户的信息
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/PaginationInfo'
                          - type: object
                            properties:
                              items:
                                type: array
                                items:
                                  allOf:
                                    - $ref: '#/components/schemas/guild'
                              user_count:
                                type: integer
                                description: 用户数量
                                example: 10
                              online_count:
                                type: integer
                                description: 用户数量
                                example: 3
                              offline_count:
                                type: integer
                                description: 离线用户数量
                                example: 7
  /guild/nickname:
    post:
      tags:
        - 服务器相关接口
      summary: 修改服务器中的用户昵称
      operationId: changeUserNickname
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - guild_id
              properties:
                guild_id:
                  $ref: '#/components/schemas/id'
                nickname:
                  type: string
                  description: 昵称，2 - 64 长度，不传则清空昵称
                user_id:
                  allOf:
                    - $ref: '#/components/schemas/properties-id'
                    - description: 要修改昵称的目标用户 ID，不传则修改当前登陆用户的昵称
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicResponse'
  /guild/leave:
    post:
      tags:
        - 服务器相关接口
      summary: 离开服务器
      operationId: leaveGuild
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - guild_id
              properties:
                guild_id:
                  $ref: '#/components/schemas/id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicResponse'
  /guild/kickout:
    post:
      tags:
        - 服务器相关接口
      summary: 踢出服务器
      operationId: kickUserById
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - guild_id
                - target_id
              properties:
                guild_id:
                  $ref: '#/components/schemas/id'
                target_id:
                  allOf:
                    - $ref: '#/components/schemas/properties-id'
                    - description: 目标用户ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicResponse'
  /guild-mute/list:
    get:
      tags:
        - 服务器相关接口
      summary: 服务器静音闭麦列表
      operationId: getGuildMuteUsers
      parameters:
        - $ref: '#/components/parameters/GuildIdParam'
        - name: return_type
          in: query
          description: 返回格式，建议为"detail", 其他情况仅作为兼容
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          mic:
                            description: return_type为detail时返回
                            type: object
                            properties:
                              type:
                                type: integer
                                description: 闭麦类型，1为麦克风闭麦
                                enum:
                                  - 1
                              user_ids:
                                type: array
                                items:
                                  $ref: '#/components/schemas/properties-id'
                          headset:
                            description: return_type为detail时返回
                            type: object
                            properties:
                              type:
                                type: integer
                                description: 闭麦类型，2为耳机静音
                                enum:
                                  - 2
                              user_ids:
                                type: array
                                items:
                                  $ref: '#/components/schemas/properties-id'
  /guild-mute/create:
    post:
      tags:
        - 服务器相关接口
      summary: 添加服务器闭麦或静音
      operationId: muteUserById
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - guild_id
                - target_id
                - type
              properties:
                guild_id:
                  $ref: '#/components/schemas/id'
                target_id:
                  allOf:
                    - $ref: '#/components/schemas/properties-id'
                    - description: 目标用户ID
                type:
                  type: integer
                  description: 静音类型，`1`代表麦克风闭麦，`2`代表耳机静音
                  enum:
                    - 1
                    - 2
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicResponse'
  /guild-mute/delete:
    post:
      tags:
        - 服务器相关接口
      summary: 删除服务器闭麦或静音
      operationId: unmuteUserById
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - guild_id
                - target_id
                - type
              properties:
                guild_id:
                  $ref: '#/components/schemas/id'
                target_id:
                  allOf:
                    - $ref: '#/components/schemas/properties-id'
                    - description: 目标用户ID
                type:
                  type: integer
                  description: 静音类型，`1`代表麦克风闭麦，`2`代表耳机静音
                  enum:
                    - 1
                    - 2
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicResponse'
  /channel/list:
    get:
      tags:
        - 服务器频道相关接口
      summary: 获取频道列表
      operationId: getGuildChannels
      parameters:
        - $ref: '#/components/parameters/PageNumberParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - $ref: '#/components/parameters/GuildIdParam'
        - $ref: '#/components/parameters/GuildChannelTypeParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/PaginationInfo'
                          - type: object
                            properties:
                              items:
                                type: array
                                items:
                                  $ref: '#/components/schemas/_index_basic-2'
  /channel/view:
    get:
      operationId: getChannelById
      tags:
        - 服务器频道相关接口
      summary: 获取频道详情
      parameters:
        - name: target_id
          required: true
          in: query
          description: 目标频道id
          schema:
            $ref: '#/components/schemas/basic-properties-id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/_index_basic-2'
  /channel/create:
    post:
      tags:
        - 服务器频道相关接口
      summary: 创建频道
      operationId: createChannel
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - guild_id
                - name
              properties:
                guild_id:
                  $ref: '#/components/schemas/id'
                parent_id:
                  allOf:
                    - $ref: '#/components/schemas/basic-properties-id'
                  description: 父分组id
                name:
                  type: string
                  description: 频道名称
                type:
                  allOf:
                    - $ref: '#/components/schemas/properties-type'
                  description: 频道类型, `1`为文字，`2`为语音, 默认为`1`
                limit_amount:
                  type: integer
                  maximum: 99
                  description: 语音频道人数限制，最大99
                voice_quality:
                  type: string
                  description: 语音音质，默认为`2`。`1`流畅，`2`正常，`3`高质量
                  enum:
                    - '1'
                    - '2'
                    - '3'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/_index_basic-2'
  /channel/delete:
    post:
      tags:
        - 服务器频道相关接口
      summary: 删除频道
      operationId: deleteChannelById
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - channel_id
              properties:
                channel_id:
                  $ref: '#/components/schemas/basic-properties-id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicResponse'
  /channel/user-list:
    get:
      tags:
        - 服务器频道相关接口
      summary: 查询语音频道内用户
      operationId: getVoiceChannelUsers
      description: 只能在语音频道之间移动，用户也必须在其他语音频道在线才能够移动到目标频道。
      parameters:
        - name: target_id
          required: true
          in: query
          description: 目标频道id, 需要是语音频道
          schema:
            $ref: '#/components/schemas/basic-properties-id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user_ids:
                            type: array
                            description: 用户id的数组
                            items:
                              $ref: '#/components/schemas/properties-id'
  /channel/move-user:
    post:
      tags:
        - 服务器频道相关接口
      summary: 语音频道之间移动用户
      operationId: moveUsersInVoiceChannel
      description: 只能在语音频道之间移动，用户也必须在其他语音频道在线才能够移动到目标频道。
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - channel_id
                - user_ids
              properties:
                channel_id:
                  allOf:
                    - $ref: '#/components/schemas/basic-properties-id'
                    - description: 目标频道id, 需要是语音频道
                user_ids:
                  type: array
                  description: 用户id的数组
                  items:
                    $ref: '#/components/schemas/properties-id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user_ids:
                            type: array
                            description: 用户id的数组
                            items:
                              $ref: '#/components/schemas/properties-id'
  /channel-role/index:
    get:
      tags:
        - 服务器频道相关接口
      summary: 频道角色权限详情
      operationId: getChannelRoleById
      parameters:
        - $ref: '#/components/parameters/GuildChannelIdParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          permission_overwrites:
                            type: array
                            description: 频道权限覆写的角色列表, role_id为角色id, 其它字段见下表
                            items:
                              allOf:
                                - type: object
                                  properties:
                                    role_id:
                                      type: string
                                      description: 角色id
                                      example: 702
                                - $ref: '#/components/schemas/GuildChannelPermission'
                          permission_users:
                            type: array
                            description: 频道权限覆写的用户列表
                            items:
                              allOf:
                                - type: object
                                  properties:
                                    user:
                                      $ref: '#/components/schemas/basic'
                                - $ref: '#/components/schemas/GuildChannelPermission'
                          permission_sync:
                            type: integer
                            description: 是否同步分组的权限
                            example: 0
  /channel-role/create:
    post:
      tags:
        - 服务器频道相关接口
      operationId: createChannelRole
      summary: 创建频道角色权限
      requestBody:
        $ref: '#/components/requestBodies/create'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        example:
                          user_id: '2418200000'
                          allow: 2048
                          deny: 0
                        allOf:
                          - type: object
                            properties:
                              user_id:
                                $ref: '#/components/schemas/properties-id'
                              role_id:
                                $ref: '#/components/schemas/GuildRoleId'
                          - $ref: '#/components/schemas/GuildChannelPermission'
  /channel-role/update:
    post:
      tags:
        - 服务器频道相关接口
      summary: 更新频道角色权限
      operationId: updateChannelRole
      requestBody:
        $ref: '#/components/requestBodies/update'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        example:
                          user_id: '2418200000'
                          allow: 2048
                          deny: 0
                        allOf:
                          - type: object
                            properties:
                              user_id:
                                $ref: '#/components/schemas/properties-id'
                              role_id:
                                $ref: '#/components/schemas/GuildRoleId'
                          - $ref: '#/components/schemas/GuildChannelPermission'
  /channel-role/delete:
    post:
      tags:
        - 服务器频道相关接口
      summary: 删除频道角色权限
      requestBody:
        $ref: '#/components/requestBodies/delete'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        example: {}
  /message/list:
    get:
      tags:
        - 频道消息相关接口
      summary: 获取频道聊天消息列表
      operationId: getChannelMessages
      description: 此接口非标准分页，需要根据参考消息来查询相邻分页的消息
      parameters:
        - name: target_id
          in: query
          description: 频道id
          required: true
          schema:
            $ref: '#/components/schemas/basic-properties-id'
        - name: msg_id
          in: query
          description: 参考消息id，不传则查询最新消息
          schema:
            type: string
        - name: pin
          in: query
          description: 只能为0或者1，是否查询置顶消息。 置顶消息只支持查询最新的消息
          schema:
            type: integer
            format: unsigned integer
            enum:
              - 0
              - 1
        - $ref: '#/components/parameters/MessageListFlagParam'
        - name: page_size
          in: query
          description: 当前分页消息数量, 默认50
          schema:
            type: integer
            default: 50
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          items:
                            type: array
                            items:
                              $ref: '#/components/schemas/_index_basic-3'
  /message/view:
    get:
      tags:
        - 频道消息相关接口
      summary: 获取频道聊天消息详情
      operationId: getChannelMessage
      description: 获取消息详情
      parameters:
        - name: msg_id
          in: query
          description: 消息id
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/_index_basic-3'
  /message/create:
    post:
      tags:
        - 频道消息相关接口
      summary: 发送频道聊天消息
      operationId: sendChannelMessage
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/SendMessageRequest'
                - type: object
                  required:
                    - target_id
                  properties:
                    target_id:
                      allOf:
                        - $ref: '#/components/schemas/basic-properties-id'
                      description: 目标频道 id
                    temp_target_id:
                      type: string
                      description: >-
                        用户id,如果传了，代表该消息是临时消息，该消息不会存数据库，但是会在频道内只给该用户推送临时消息。用于在频道内针对用户的操作进行单独的回应通知等。
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  data:
                    properties:
                      msg_id:
                        allOf:
                          - $ref: '#/components/schemas/_fields_id'
                        description: 服务端生成的消息 id
                      msg_timestamp:
                        type: integer
                        description: 消息发送时间(ms, 服务器时间戳)
                        example: 1607072537177
                      nonce:
                        type: string
                        description: 原样返回的字符串
                        example: xxxx
  /message/update:
    post:
      tags:
        - 频道消息相关接口
      summary: 更新频道聊天消息
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - target_id
                - content
              properties:
                msg_id:
                  $ref: '#/components/schemas/_fields_id'
                content:
                  type: string
                  description: 消息内容
                quote:
                  allOf:
                    - $ref: '#/components/schemas/_fields_id'
                  description: 回复某条消息的`msgId`。如果为空，则代表删除回复，不传则无影响。
                temp_target_id:
                  type: string
                  description: 用户id，针对特定用户临时更新消息，必须是正常消息才能更新。与发送临时消息概念不同，但同样不保存数据库。
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicResponse'
  /message/delete:
    post:
      tags:
        - 频道消息相关接口
      summary: 删除频道聊天消息
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - target_id
                - content
              properties:
                msg_id:
                  $ref: '#/components/schemas/_fields_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicResponse'
  /message/reaction-list:
    get:
      tags:
        - 频道消息相关接口
      summary: 获取频道消息某个回应的用户列表
      operationId: getMessageReactionUsers
      parameters:
        - name: msg_id
          in: query
          description: 频道消息的id
          required: true
          schema:
            $ref: '#/components/schemas/_fields_id'
        - name: emoji
          in: query
          description: emoji的id, 可以为GuildEmoji或者Emoji, 注意：在get中，应该进行urlencode
          schema:
            $ref: '#/components/schemas/GuildEmojiId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          allOf:
                            - $ref: '#/components/schemas/basic'
                            - type: object
                              properties:
                                reaction_time:
                                  type: integer
                                  description: 用户点击reaction的毫秒时间戳
                                  example: 1612323994414
  /message/add-reaction:
    post:
      tags:
        - 频道消息相关接口
      summary: 为消息添加回应
      operationId: addMessageReaction
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - msg_id
                - emoji
              properties:
                msg_id:
                  $ref: '#/components/schemas/_fields_id'
                emoji:
                  $ref: '#/components/schemas/GuildEmojiId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicResponse'
  /message/delete-reaction:
    post:
      tags:
        - 频道消息相关接口
      summary: 为消息删除回应
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - msg_id
                - emoji
              properties:
                msg_id:
                  $ref: '#/components/schemas/_fields_id'
                emoji:
                  $ref: '#/components/schemas/GuildEmojiId'
                user_id:
                  allOf:
                    - $ref: '#/components/schemas/properties-id'
                    - description: 用户的id, 如果不填则为自己的id。删除别人的reaction需要有管理频道消息的权限
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicResponse'
  /user-chat/list:
    get:
      tags:
        - 私聊会话
      summary: 获取私信频道列表
      parameters:
        - $ref: '#/components/parameters/PageNumberParam'
        - $ref: '#/components/parameters/PageSizeParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/PaginationInfo'
                          - type: object
                            properties:
                              items:
                                type: array
                                items:
                                  $ref: '#/components/schemas/UserChat'
  /user-chat/view:
    get:
      tags:
        - 私聊会话
      summary: 获取私信频道详情
      parameters:
        - name: chat_code
          in: query
          description: 私聊会话 Code
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/UserChatDetail'
  /user-chat/create:
    post:
      tags:
        - 私聊会话
      summary: 创建私信频道
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                target_id:
                  allOf:
                    - $ref: '#/components/schemas/properties-id'
                  description: 目标用户id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/UserChatDetail'
  /user-chat/delete:
    post:
      tags:
        - 私聊会话
      summary: 删除私信频道
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                target_id:
                  allOf:
                    - $ref: '#/components/schemas/ChatCode'
                  description: 私信会话Code
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicResponse'
  /direct-message/list:
    get:
      tags:
        - 私聊消息相关接口
      summary: 获取私信消息列表
      parameters:
        - name: chat_code
          in: query
          description: 私信会话 Code。`chat_code`与`target_id`必须传一个
          schema:
            type: string
        - name: target_id
          description: 目标用户 id，后端会自动创建会话。有此参数之后可不传`chat_code`参数
          in: query
          schema:
            $ref: '#/components/schemas/properties-id'
        - name: msg_id
          description: 参考消息 id，不传则查询最新消息
          in: query
          schema:
            $ref: '#/components/schemas/_fields_id'
        - $ref: '#/components/parameters/MessageListFlagParam'
        - $ref: '#/components/parameters/PageNumberParam'
        - name: page_size
          in: query
          description: 当前分页消息数量, 默认50
          schema:
            type: integer
            default: 50
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          items:
                            type: array
                            items:
                              $ref: '#/components/schemas/DirectMessage'
  /direct-message/create:
    post:
      tags:
        - 私聊消息相关接口
      summary: 发送私信聊天消息
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/SendMessageRequest'
              type: object
              properties:
                target_id:
                  allOf:
                    - $ref: '#/components/schemas/properties-id'
                  description: 目标用户 id，后端会自动创建会话。有此参数之后可不传`chat_code`参数
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  data:
                    properties:
                      msg_id:
                        type: string
                        description: 服务端生成的消息 id
                        example: 50974c-364c983fa6cb
                      msg_timestamp:
                        type: integer
                        description: 消息发送时间(ms, 服务器时间戳)
                        example: 1607072537177
                      nonce:
                        type: string
                        description: 原样返回的字符串
                        example: xxxx
  /direct-message/update:
    post:
      tags:
        - 私聊消息相关接口
      summary: 更新私信聊天消息
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - target_id
                - content
              properties:
                msg_id:
                  $ref: '#/components/schemas/_fields_id'
                content:
                  type: string
                  description: 消息内容
                quote:
                  allOf:
                    - $ref: '#/components/schemas/_fields_id'
                  description: 回复某条消息的`msgId`。如果为空，则代表删除回复，不传则无影响。
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicResponse'
  /direct-message/delete:
    post:
      tags:
        - 私聊消息相关接口
      summary: 删除私信聊天消息
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - target_id
                - content
              properties:
                msg_id:
                  $ref: '#/components/schemas/_fields_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicResponse'
  /direct-message/reaction-list:
    get:
      tags:
        - 私聊消息相关接口
      summary: 获取消息某个回应的用户列表
      parameters:
        - name: msg_id
          in: query
          description: 消息的id
          required: true
          schema:
            $ref: '#/components/schemas/_fields_id'
        - name: emoji
          in: query
          description: emoji的id, 可以为GuildEmoji或者Emoji, 注意：在get中，应该进行urlencode
          schema:
            $ref: '#/components/schemas/GuildEmojiId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          allOf:
                            - $ref: '#/components/schemas/basic'
                            - type: object
                              properties:
                                reaction_time:
                                  type: integer
                                  description: 用户点击reaction的毫秒时间戳
  /direct-message/add-reaction:
    post:
      tags:
        - 私聊消息相关接口
      summary: 为消息添加回应
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - msg_id
                - emoji
              properties:
                msg_id:
                  $ref: '#/components/schemas/_fields_id'
                emoji:
                  $ref: '#/components/schemas/GuildEmojiId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicResponse'
  /direct-message/delete-reaction:
    post:
      tags:
        - 私聊消息相关接口
      summary: 为消息删除回应
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - msg_id
                - emoji
              properties:
                msg_id:
                  $ref: '#/components/schemas/_fields_id'
                emoji:
                  $ref: '#/components/schemas/GuildEmojiId'
                user_id:
                  allOf:
                    - $ref: '#/components/schemas/properties-id'
                    - description: 用户的id, 如果不填则为自己的id。删除别人的reaction需要有管理频道消息的权限
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicResponse'
  /gateway/index:
    get:
      tags:
        - Gateway接口
      summary: 获取网关连接地址
      operationId: getIndex
      parameters:
        - name: compress
          in: query
          description: 下发数据是否压缩，默认为`1`,代表压缩
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  data:
                    type: object
                    properties:
                      url:
                        type: string
                        description: 网关的连接地址
                        example: wss://xxxx
  /user/me:
    get:
      tags:
        - 用户相关接口
      summary: 获取当前用户信息
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/basic'
                          - type: object
                            properties:
                              mobile_verified:
                                type: boolean
                                description: 手机号是否已验证
                                example: true
                              mobile_prefix:
                                type: string
                                description: 手机区号,如中国为86
                                example: '86'
                              mobile:
                                type: string
                                description: 用户手机号，带掩码
                                example: 110****2333
                              invited_count:
                                type: integer
                                description: 当前邀请注册的人数
                                example: 3
  /user/view:
    get:
      tags:
        - 用户相关接口
      summary: 获取目标用户信息
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
        - name: guild_id
          in: query
          description: 服务器id
          schema:
            $ref: '#/components/schemas/id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/basic'
                          - type: object
                            properties:
                              mobile_verified:
                                type: boolean
                                description: 手机号是否已验证
                                example: true
                              roles:
                                type: array
                                description: 用户在当前服务器中的角色 id 组成的列表
                                items:
                                  $ref: '#/components/schemas/GuildRoleId'
                              joined_at:
                                type: integer
                                description: 加入服务器时间
                                example: 1621338425000
                              active_time:
                                type: integer
                                description: 活跃时间
                                example: 1628688607719
  /user/offline:
    post:
      tags:
        - 用户相关接口
      summary: 机器人下线
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
  /asset/create:
    post:
      tags:
        - 附件相关接口
      summary: 上传多媒体文件
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: 目前支持 **图片**, **视频(.mp4 .mov)**, **文件**
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          url:
                            type: string
                            description: 资源url
                            example: >-
                              https://img.kookapp.cn/attachments/2021-01/18/xxxxxxxxx.txt
  /guild-role/list:
    get:
      tags:
        - 服务器角色权限相关接口
      summary: 获取服务器角色列表
      parameters:
        - $ref: '#/components/parameters/GuildIdParam'
        - $ref: '#/components/parameters/PageNumberParam'
        - $ref: '#/components/parameters/PageSizeParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/PaginationInfo'
                          - type: object
                            properties:
                              items:
                                type: array
                                items:
                                  type: object
                                  $ref: '#/components/schemas/GuildRole'
  /guild-role/create:
    post:
      tags:
        - 服务器角色权限相关接口
      summary: 创建服务器角色
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - guild_id
              properties:
                guild_id:
                  $ref: '#/components/schemas/id'
                name:
                  type: string
                  description: 如果不写，则为"新角色"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/GuildRole'
  /guild-role/update:
    post:
      tags:
        - 服务器角色权限相关接口
      summary: 更新服务器角色
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - guild_id
                - role_id
              properties:
                guild_id:
                  $ref: '#/components/schemas/id'
                role_id:
                  type: integer
                  format: unsigned integer
                  description: 角色id
                  example: 702
                name:
                  type: string
                  description: 角色名称
                  example: 管理员
                color:
                  type: integer
                  format: unsigned integer
                  minimum: 0
                  maximum: 16777215
                  description: 颜色
                  example: 0
                hoist:
                  type: integer
                  format: unsigned integer
                  description: 只能为0或者1，是否把该角色的用户在用户列表排到前面
                  enum:
                    - 0
                    - 1
                mentionable:
                  type: integer
                  format: unsigned integer
                  description: 只能为0或者1，该角色是否可以被提及
                  enum:
                    - 0
                    - 1
                permissions:
                  type: integer
                  format: unsigned integer
                  description: >-
                    权限,参见[权限说明](https://developer.kookapp.cn/doc/http/guild-role#权限说明)
                  example: 2048
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/GuildRole'
  /guild-role/delete:
    post:
      tags:
        - 服务器角色权限相关接口
      summary: 删除服务器角色
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - guild_id
                - role_id
              properties:
                guild_id:
                  $ref: '#/components/schemas/id'
                role_id:
                  type: integer
                  format: unsigned integer
                  description: 角色id
                  example: 702
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
  /guild-role/grant:
    post:
      tags:
        - 服务器角色权限相关接口
      summary: 赋予用户角色
      operationId: grantGuildRole
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - guild_id
                - user_id
                - role_id
              properties:
                guild_id:
                  $ref: '#/components/schemas/id'
                user_id:
                  $ref: '#/components/schemas/properties-id'
                role_id:
                  $ref: '#/components/schemas/GuildRoleId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user_id:
                            $ref: '#/components/schemas/properties-id'
                          guild_id:
                            $ref: '#/components/schemas/id'
                          roles:
                            type: array
                            description: 角色id的列表
                            items:
                              $ref: '#/components/schemas/GuildRoleId'
  /guild-role/revoke:
    post:
      tags:
        - 服务器角色权限相关接口
      summary: 删除用户角色
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - guild_id
                - user_id
                - role_id
              properties:
                guild_id:
                  $ref: '#/components/schemas/id'
                user_id:
                  $ref: '#/components/schemas/properties-id'
                role_id:
                  $ref: '#/components/schemas/GuildRoleId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user_id:
                            $ref: '#/components/schemas/properties-id'
                          guild_id:
                            $ref: '#/components/schemas/id'
                          roles:
                            type: array
                            description: 角色id的列表
                            items:
                              $ref: '#/components/schemas/GuildRoleId'
  /intimacy/index:
    get:
      tags:
        - 亲密度相关接口
      summary: 获取用户的亲密度
      operationId: getIntimacy
      description: 机器人可以在后台配置默认的初始亲密度和形象，当用户触发某些事件时，机器人可以根据一些逻辑来更新与该用户的亲密度以及形象展示。
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          img_url:
                            type: string
                            description: 机器人给用户显示的形象图片地址
                          social_info:
                            type: string
                            description: 机器人显示给用户的社交信息
                            example: test
                          last_read:
                            type: integer
                            description: 用户上次查看的时间戳
                            example: 0
                          img_list:
                            type: array
                            description: 形象图片的总列表
                            items:
                              type: object
                              properties:
                                id:
                                  type: string
                                  description: 形象图片的 id
                                  example: '11'
                                url:
                                  type: string
                                  description: 形象图片的地址
                                  example: ''
  /intimacy/update:
    post:
      tags:
        - 亲密度相关接口
      summary: 更新用户亲密度
      operationId: updateIntimacy
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
              properties:
                user_id:
                  allOf:
                    - $ref: '#/components/schemas/properties-id'
                  description: 用户的id
                score:
                  type: integer
                  description: 亲密度，0-2200
                  example: 123
                social_info:
                  type: string
                  description: 机器人与用户的社交信息，500 字以内
                  example: test
                img_id:
                  type: string
                  description: 表情 ID
                  example: '1'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
  /guild-emoji/list:
    get:
      tags:
        - 服务器表情相关接口
      summary: 获取服务器表情列表
      operationId: getGuildEmojis
      parameters:
        - $ref: '#/components/parameters/PageNumberParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - $ref: '#/components/parameters/GuildIdParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/PaginationInfo'
                          - type: object
                            properties:
                              items:
                                type: array
                                items:
                                  type: object
                                  $ref: '#/components/schemas/GuildEmoji'
  /guild-emoji/create:
    post:
      tags:
        - 服务器表情相关接口
      summary: 创建服务器表情
      operationId: createGuildEmoji
      description: Header 中 Content-Type 必须为 multipart/form-data
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - guild_id
                - emoji
              properties:
                name:
                  type: string
                  description: 表情名。长度限制 2 - 32 字符，如果不写，则为随机字符串
                guild_id:
                  $ref: '#/components/schemas/id'
                emoji:
                  type: string
                  format: binary
                  description: 表情文件。必须为 PNG 类型，大小不能超过 256 KB
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/GuildEmoji'
  /guild-emoji/update:
    post:
      tags:
        - 服务器表情相关接口
      summary: 更新服务器表情
      operationId: updateGuildEmoji
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - id
              properties:
                name:
                  type: string
                  description: 表情名。长度限制 2 - 32 字符，如果不写，则为随机字符串
                id:
                  type: string
                  description: 表情 ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
  /guild-emoji/delete:
    post:
      tags:
        - 服务器表情相关接口
      operationId: deleteGuildEmoji
      summary: 删除服务器表情
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: string
                  description: 表情 ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
  /invite/list:
    get:
      tags:
        - 邀请相关接口
      summary: 获取邀请列表
      operationId: listInvites
      description: 服务器id或者频道id必须填一个
      parameters:
        - name: guild_id
          in: query
          description: 服务器id
          required: false
          schema:
            $ref: '#/components/schemas/id'
        - $ref: '#/components/parameters/GuildChannelIdParam'
        - $ref: '#/components/parameters/PageNumberParam'
        - $ref: '#/components/parameters/PageSizeParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/PaginationInfo'
                          - type: object
                            properties:
                              items:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    channel_id:
                                      $ref: '#/components/schemas/basic-properties-id'
                                    guild_id:
                                      $ref: '#/components/schemas/id'
                                    url_code:
                                      type: string
                                      description: 邀请码
                                      example: XXX
                                    url:
                                      type: string
                                      description: 邀请链接
                                      example: https://kook.top/XXX
                                    user:
                                      $ref: '#/components/schemas/basic'
  /invite/create:
    post:
      tags:
        - 邀请相关接口
      operationId: createInvite
      summary: 创建邀请链接
      description: 服务器id或者频道id必须填一个
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                guild_id:
                  $ref: '#/components/schemas/id'
                channel_id:
                  $ref: '#/components/schemas/basic-properties-id'
                duration:
                  type: integer
                  description: >-
                    邀请链接有效时长（秒）（ 0 => 永不； 1800 => 0.5小时； 3600 => 1个小时； 21600 =>
                    6个小时； 43200 => 12个小时； 86400 => 1天； 604800 => 7天）
                  default: 604800
                  example: 604800
                  enum:
                    - 0
                    - 1800
                    - 3600
                    - 32600
                    - 43200
                    - 86400
                    - 604800
                setting_times:
                  type: integer
                  description: >-
                    设置的次数 （ -1 => 无限制； 1 => 1次使用； 5 => 5次使用； 10 => 10次使用 ；25 =>
                    25次使用； 50 => 50次使用； 100 => 100次使用）
                  default: -1
                  example: -1
                  enum:
                    - -1
                    - 1
                    - 5
                    - 10
                    - 25
                    - 50
                    - 100
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          url:
                            type: string
                            description: 邀请链接
                            example: https://kook.top/xxxx
  /invite/delete:
    post:
      tags:
        - 邀请相关接口
      summary: 删除邀请链接
      operationId: deleteInvite
      description: 服务器id或者频道id必须填一个
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - url_code
              properties:
                url_code:
                  type: string
                  example: XXX
                guild_id:
                  $ref: '#/components/schemas/id'
                channel_id:
                  $ref: '#/components/schemas/basic-properties-id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicResponse'
webhooks:
  textMessage:
    post:
      tags:
        - 消息相关事件
      summary: 文字消息
      requestBody:
        $ref: '#/components/requestBodies/text'
  imageMessage:
    post:
      tags:
        - 消息相关事件
      summary: 图片消息
      requestBody:
        $ref: '#/components/requestBodies/image'
  videoMessage:
    post:
      tags:
        - 消息相关事件
      summary: 视频消息
      requestBody:
        $ref: '#/components/requestBodies/video'
  fileMessage:
    post:
      tags:
        - 消息相关事件
      summary: 文件消息
      requestBody:
        $ref: '#/components/requestBodies/file'
  kmarkdownMessage:
    post:
      tags:
        - 消息相关事件
      summary: KMarkDown消息
      requestBody:
        $ref: '#/components/requestBodies/kmarkdown'
  cardMessage:
    post:
      tags:
        - 消息相关事件
      summary: 卡片消息
      requestBody:
        $ref: '#/components/requestBodies/card'
  userAddReaction:
    post:
      tags:
        - 频道相关事件
      summary: 用户添加reaction
      requestBody:
        $ref: '#/components/requestBodies/add'
  userDeleteReaction:
    post:
      tags:
        - 频道相关事件
      summary: 频道内用户取消reaction
      requestBody:
        $ref: '#/components/requestBodies/reaction_delete'
  updateMessge:
    post:
      tags:
        - 频道相关事件
        - 消息相关事件
      summary: 频道消息更新
      requestBody:
        $ref: '#/components/requestBodies/message_update'
  deleteMessage:
    post:
      tags:
        - 频道相关事件
        - 消息相关事件
      summary: 频道消息被删除
      requestBody:
        $ref: '#/components/requestBodies/message_delete'
  createChannel:
    post:
      tags:
        - 频道相关事件
      summary: 新增频道
      requestBody:
        $ref: '#/components/requestBodies/channel_create'
  updateChannel:
    post:
      tags:
        - 频道相关事件
      summary: 频道信息更新
      requestBody:
        $ref: '#/components/requestBodies/channel_update'
  deleteChannel:
    post:
      tags:
        - 频道相关事件
      summary: 删除频道
      requestBody:
        $ref: '#/components/requestBodies/channel_delete'
  pinMessage:
    post:
      tags:
        - 频道相关事件
      summary: 新的频道置顶消息
      requestBody:
        $ref: '#/components/requestBodies/pin_add'
  unpinMessage:
    post:
      tags:
        - 频道相关事件
      summary: 取消频道置顶消息
      requestBody:
        $ref: '#/components/requestBodies/cancel'
  updatePrivateMessage:
    post:
      tags:
        - 私聊相关事件
      summary: 私聊消息更新
      requestBody:
        $ref: '#/components/requestBodies/message_update-2'
  deletePrivateMessage:
    post:
      tags:
        - 私聊相关事件
      summary: 私聊消息被删除
      requestBody:
        $ref: '#/components/requestBodies/message_delete-2'
  privateAddReaction:
    post:
      tags:
        - 私聊相关事件
      summary: 私聊内用户添加reaction
      requestBody:
        $ref: '#/components/requestBodies/reaction_add'
  privateDeleteReaction:
    post:
      tags:
        - 私聊相关事件
      summary: 私聊内用户删除reaction
      requestBody:
        $ref: '#/components/requestBodies/reaction_delete-2'
  memberJoin:
    post:
      tags:
        - 服务器成员相关事件
      summary: 新成员加入服务器
      requestBody:
        $ref: '#/components/requestBodies/join'
  memberExit:
    post:
      tags:
        - 服务器成员相关事件
      summary: 服务器成员退出
      requestBody:
        $ref: '#/components/requestBodies/exit'
  memberUpdate:
    post:
      tags:
        - 服务器成员相关事件
      summary: 服务器成员信息更新
      requestBody:
        $ref: '#/components/requestBodies/member_update'
  memberOnline:
    post:
      tags:
        - 服务器成员相关事件
      summary: 服务器成员信息上线
      requestBody:
        $ref: '#/components/requestBodies/online'
  memberOffline:
    post:
      tags:
        - 服务器成员相关事件
      summary: 服务器成员信息下线
      requestBody:
        $ref: '#/components/requestBodies/offline'
  roleAdd:
    post:
      tags:
        - 服务器角色相关事件
      summary: 服务器角色增加
      requestBody:
        $ref: '#/components/requestBodies/role_add'
  roleUpdate:
    post:
      tags:
        - 服务器角色相关事件
      summary: 服务器角色更新
      requestBody:
        $ref: '#/components/requestBodies/role_update'
  roleDelete:
    post:
      tags:
        - 服务器角色相关事件
      summary: 服务器角色删除
      requestBody:
        $ref: '#/components/requestBodies/role_delete'
  guildUpdate:
    post:
      tags:
        - 服务器相关事件
      summary: 服务器信息更新
      requestBody:
        $ref: '#/components/requestBodies/guild_update'
  guildDelete:
    post:
      tags:
        - 服务器相关事件
      summary: 服务器删除
      requestBody:
        $ref: '#/components/requestBodies/guild_delete'
  guildBanUser:
    post:
      tags:
        - 服务器相关事件
      summary: 服务器封禁用户
      requestBody:
        $ref: '#/components/requestBodies/ban'
  guildUnbanUser:
    post:
      tags:
        - 服务器相关事件
      summary: 服务器解除封禁用户
      requestBody:
        $ref: '#/components/requestBodies/unban'
  userJoinChannel:
    post:
      tags:
        - 用户相关事件
        - 频道相关事件
      summary: 用户加入语音频道
      requestBody:
        $ref: '#/components/requestBodies/channel_join'
  userExitChannel:
    post:
      tags:
        - 用户相关事件
        - 频道相关事件
      summary: 用户退出语音频道
      requestBody:
        $ref: '#/components/requestBodies/channel_exit'
  userJoinGuild:
    post:
      tags:
        - 用户相关事件
        - 频道相关事件
      summary: 自己加入服务器
      description: |
        当自己被邀请或主动加入新的服务器时, 产生该事件（对于机器人来说，就是机器人被邀请进入新服务器）
      requestBody:
        $ref: '#/components/requestBodies/guild_join'
  userExitGuild:
    post:
      tags:
        - 用户相关事件
        - 频道相关事件
      summary: 自己退出服务器
      description: |
        当自己被踢出服务器或被拉黑或主动退出服务器时, 产生该事件（对于机器人来说，就是机器人被踢出/拉黑/主动退出新服务器）
      requestBody:
        $ref: '#/components/requestBodies/guild_exit'
  userUpdateInfo:
    post:
      tags:
        - 用户相关事件
        - 频道相关事件
      summary: 用户信息更新
      description: |
        **该事件与服务器无关, 遵循以下条件**
        - 仅当用户的 **用户名** 或 **头像** 变更时;
        - 仅通知与该用户存在关联的用户或Bot: a. 存在聊天会话 b. 双方好友关系
      requestBody:
        $ref: '#/components/requestBodies/info_update'
  userClickButton:
    post:
      tags:
        - 用户相关事件
        - 消息相关事件
      summary: 用户点击按钮（Card Message）
      requestBody:
        $ref: '#/components/requestBodies/click-button'
components:
  parameters:
    PageNumberParam:
      name: page
      in: query
      description: 目标页数
      schema:
        type: integer
    PageSizeParam:
      name: page_size
      in: query
      description: 每页数据数量
      schema:
        type: integer
    GuildIdParam:
      name: guild_id
      in: query
      description: 服务器id
      required: true
      schema:
        $ref: '#/components/schemas/id'
    GuildChannelIdParam:
      name: channel_id
      in: query
      description: 频道id
      schema:
        $ref: '#/components/schemas/basic-properties-id'
    MobileVerifiedParam:
      name: mobile_verified
      in: query
      description: 只能为`0`或`1`，`0`是未认证，`1`是已认证
      schema:
        type: integer
        enum:
          - 0
          - 1
    GuildChannelTypeParam:
      name: type
      in: query
      description: 频道类型, `1`为文字，`2`为语音, 默认为`1`
      schema:
        $ref: '#/components/schemas/properties-type'
    MessageListFlagParam:
      name: flag
      in: query
      description: |-
        查询模式，有三种模式可以选择。不传则默认查询最新的消息。  
        before: 查询参考消息之前的消息，不包括参考消息  
        around: 查询以参考消息为中心，前后一定数量的消息  
        after: 查询参考消息之后的消息，不包括参考消息
      schema:
        type: string
        enum:
          - before
          - around
          - after
    UserIdParam:
      name: user_id
      in: query
      required: true
      description: 用户id
      schema:
        $ref: '#/components/schemas/properties-id'
  schemas:
    type:
      type: integer
      description: 消息类型, 1:文字消息, 2:图片消息，3:视频消息，4:文件消息， 8:音频消息，9:KMarkdown，10:card消息
    id:
      type: string
      description: 服务器id
      example: '91686000000'
    mention:
      type: array
      description: '`@特定用户` 的用户ID数组'
      items:
        type: string
    mention_all:
      type: boolean
      description: 是否含有`@全体人员`
    mention_roles:
      type: array
      description: '`@特定角色` 的角色ID数组'
      items:
        type: integer
    mention_here:
      type: boolean
      description: 是否含有`@在线成员`
    basic:
      type: object
      description: 用户对象
      properties:
        id:
          type: string
          description: 用户id
          example: '2418200000'
        username:
          type: string
          description: 用户的名称
          example: tz-un
        identify_num:
          type: string
          description: 用户名的认证数字，用户名正常为：user_name#identify_num
          example: '5618'
        online:
          type: boolean
          description: 当前是否在线
          example: false
        status:
          type: integer
          description: 用户的状态, 0和1代表正常，10代表被封禁
          enum:
            - 0
            - 1
            - 10
          example: 0
        bot:
          type: boolean
          description: 是否为机器人
        avatar:
          type: string
          description: 用户的头像的url地址
          example: https://img.kookapp.cn/avatars/2020-02/xxxx.jpg/icon
        vip_avatar:
          type: string
          description: vip用户的头像的url地址，可能为gif动图
          example: https://img.kookapp.cn/avatars/2020-02/xxxx.jpg/icon
        mobile_verified:
          type: boolean
          description: 手机号是否已验证
          example: true
    mention_part:
      type: object
      properties:
        id:
          type: string
          example: 28444
        username:
          type: string
          example: example
        full_name:
          type: string
          example: example#1111
        avatar:
          type: string
          example: '***.jpg'
    role_id:
      type: integer
      format: unsigned integer
      description: 角色id
      example: 702
    mention_info:
      type: object
      properties:
        mention_part:
          description: '`@特定用户` 的用户ID信息，与`mention`中数据对应'
          type: array
          items:
            $ref: '#/components/schemas/mention_part'
        mention_role_part:
          type: array
          description: '`@特定角色` 的角色ID信息，与`mention_roles`中数据对应'
          items:
            $ref: '#/components/schemas/role_id'
    kmarkdownElement:
      allOf:
        - $ref: '#/components/schemas/mention_info'
        - type: object
          properties:
            raw_content:
              type: string
              description: 经过编译的纯文本，如原始文本为"*Hello World*", 则此处为"Hello World"
    kmarkdown:
      type: object
      description: kmarkdown消息
      properties:
        type:
          allOf:
            - $ref: '#/components/schemas/type'
          example: 9
        guild_id:
          $ref: '#/components/schemas/id'
        channel_name:
          type: string
          description: 频道名
          example: 一个频道
        mention:
          $ref: '#/components/schemas/mention'
        mention_all:
          $ref: '#/components/schemas/mention_all'
        mention_roles:
          $ref: '#/components/schemas/mention_roles'
        mention_here:
          $ref: '#/components/schemas/mention_here'
        author:
          $ref: '#/components/schemas/basic'
        kmarkdown:
          $ref: '#/components/schemas/kmarkdownElement'
    card:
      type: object
      description: 卡片消息
      properties:
        type:
          allOf:
            - $ref: '#/components/schemas/type'
          example: 9
        guild_id:
          $ref: '#/components/schemas/id'
        channel_name:
          type: string
          description: 频道名
          example: 一个频道
        mention:
          $ref: '#/components/schemas/mention'
        mention_all:
          $ref: '#/components/schemas/mention_all'
        mention_roles:
          $ref: '#/components/schemas/mention_roles'
        mention_here:
          $ref: '#/components/schemas/mention_here'
        author:
          $ref: '#/components/schemas/basic'
    basic-2:
      type: object
      required:
        - s
        - d
        - sn
      properties:
        s:
          type: integer
          description: >-
            websocket信令，详见[KOOK
            websocket说明](https://developer.kookapp.cn/doc/websocket)
          example: 0
        d:
          type: object
          description: 具体数据
          required:
            - channel_type
            - type
            - target_id
            - author_id
            - content
            - msg_id
            - msg_timestamp
            - extra
          properties:
            channel_type:
              type: string
              description: >-
                消息频道类型, 群体消息为`GROUP`，个人消息为`PERSON`。例如，向频道内发送的消息为`GROUP`,
                按钮返回事件为`PERSON`
              example: GROUP
              enum:
                - GROUP
                - PERSON
            type:
              type: integer
            target_id:
              type: string
              description: 发送目的 id，如果为是 GROUP 消息，则 target_id 代表频道 id
              example: '60163899100000'
            author_id:
              type: string
              description: 发送者 id, 1 代表系统
              example: 1
            content:
              type: string
              description: 消息内容, 文件，图片，视频时，content 为 url
            msg_id:
              type: string
              description: 消息的 id
              example: 67637d4c-xxxx-xxxx-xxxx-xxxxx
            msg_timestamp:
              type: integer
              description: 消息发送时间的毫秒时间戳
              example: 1607674740160
            nonce:
              type: string
              description: 随机串，与用户消息发送 api 中传的 nonce 保持一致
              example: your nonce
            verify_token:
              type: string
              description: webhook设置中的verify_token
              example: your verify token
            extra:
              type: object
              description: 不同的消息类型，结构不一致
        sn:
          type: integer
          description: >-
            消息序号，针对当前session。该字段并不一定有，只在s=0时有，与webhook一致。详见[KOOK
            websocket说明](https://developer.kookapp.cn/doc/websocket)
          example: 1
    image:
      type: object
      description: 图片消息
      properties:
        type:
          allOf:
            - $ref: '#/components/schemas/type'
          example: 2
        guild_id:
          $ref: '#/components/schemas/id'
        author:
          $ref: '#/components/schemas/basic'
        attachments:
          type: object
          properties:
            type:
              type: string
              enum:
                - image
            name:
              type: string
              description: 多媒体名
              example: xxx.jpg
            url:
              type: string
              description: 附件链接
              example: https://img.kookapp.cn/assets/2020-12/IHT5xxxxxA07o03m.jpg
    video:
      type: object
      description: 视频消息
      properties:
        type:
          allOf:
            - $ref: '#/components/schemas/type'
          example: 3
        guild_id:
          $ref: '#/components/schemas/id'
        author:
          $ref: '#/components/schemas/basic'
        attachments:
          type: object
          properties:
            type:
              type: string
              enum:
                - video
            name:
              type: string
              description: 多媒体名
              example: 002iQMhagx07Fx0S4xxxx323o0E010.mp4
            url:
              type: string
              description: 附件链接
              example: https://img.kookapp.cn/attachments/2020-12/11/asd.mp4
            file_type:
              description: 文件格式
              type: string
              example: video/mp4
            size:
              type: integer
              description: 大小 单位（B）
              example: 722882
            duration:
              type: number
              description: 视频时长（s）
              example: 15.673
            width:
              type: integer
              description: 视频宽度
              example: 640
            height:
              type: integer
              description: 视频高度
              example: 480
    file:
      type: object
      description: 文件消息
      properties:
        type:
          allOf:
            - $ref: '#/components/schemas/type'
          example: 4
        guild_id:
          $ref: '#/components/schemas/id'
        author:
          $ref: '#/components/schemas/basic'
        attachments:
          type: object
          properties:
            type:
              type: string
              enum:
                - file
            url:
              type: string
              example: https://img.kookapp.cn/attachments/2020-12/11/asd.txt
            file_type:
              description: 文件格式
              type: string
              example: text/plain
            name:
              type: string
              description: 多媒体名
            size:
              type: integer
              description: 大小 单位（B）
              example: 2575670
    BasicResponse:
      type: object
      required:
        - message
        - code
      properties:
        code:
          type: integer
          description: 错误码，0代表成功，非0代表失败，具体的错误码参见错误码一览
          example: 0
        message:
          type: string
          description: 错误消息，具体的返回消息会根据Accept-Language来返回。
          example: 操作成功
        data:
          type: object
          description: 返回数据
    PaginationInfo:
      type: object
      properties:
        items:
          type: array
          description: 数据列表
          items:
            type: object
        meta:
          type: object
          description: 分页信息
          properties:
            page:
              type: integer
              description: 页码
              example: 1
            page_total:
              type: integer
              description: 总页数
              example: 10
            page_size:
              type: integer
              description: 每一页的数据
              example: 50
            total:
              type: integer
              description: 总数据量
              example: 480
        sort:
          type: object
          description: Map。分页的排序, key:+-1, 如果为1代表按key升序，如果为-1代表按key降序
          example:
            id: 1
    properties-id:
      type: string
      description: 用户id
      example: '2418200000'
    _index_basic:
      type: object
      properties:
        id:
          type: string
          description: 服务器id
          example: '91686000000'
        name:
          type: string
          description: 服务器名称
          example: Hello
        topic:
          type: string
          description: 服务器主题
        user_id:
          allOf:
            - $ref: '#/components/schemas/properties-id'
          description: 服务器主的id
        icon:
          type: string
          description: 服务器icon的地址
          example: https://xxx/icons/2020-05/YQyfHxxx.png/icon
        notify_type:
          type: integer
          description: 通知类型, `0`代表默认使用服务器通知设置，`1`代表接收所有通知, `2`代表仅@被提及，`3`代表不接收通知
          enum:
            - 0
            - 1
            - 2
            - 3
          example: 0
        region:
          type: string
          description: 服务器默认使用语音区域
          example: beijing
        enable_open:
          type: boolean
          description: 是否为公开服务器
          example: true
        open_id:
          type: string
          description: 公开服务器id
          example: '012312413'
        default_channel_id:
          type: string
          description: 默认频道id
          example: '5915900001396830'
        welcome_channel_id:
          type: string
          description: 欢迎频道id
          example: '5789900001312330'
        boost_num:
          type: integer
          description: 服务器助力数量
          example: 3
        level:
          type: integer
          description: 服务器等级
          example: 0
    role_basic:
      type: object
      properties:
        role_id:
          type: integer
          format: unsigned integer
          description: 角色id
          example: 702
        name:
          type: string
          description: 角色名称
          example: 管理员
        color:
          type: integer
          format: unsigned integer
          minimum: 0
          maximum: 16777215
          description: 颜色
          example: 0
        position:
          type: integer
          format: unsigned integer
          description: 顺序，值越小载靠前
          example: 1
        hoist:
          type: integer
          format: unsigned integer
          description: 只能为0或者1，是否把该角色的用户在用户列表排到前面
          enum:
            - 0
            - 1
        mentionable:
          type: integer
          format: unsigned integer
          description: 只能为0或者1，该角色是否可以被提及
          enum:
            - 0
            - 1
        permissions:
          type: integer
          format: unsigned integer
          description: >-
            允许的权限，参见[权限说明](https://developer.kookapp.cn/doc/http/guild-role#权限说明)
          example: 2048
    _index_basic-2:
      type: object
      description: 服务器频道
      properties:
        id:
          type: string
          description: 服务器频道ID
          example: '3321010478582000'
        guild_id:
          $ref: '#/components/schemas/id'
        user_id:
          description: 频道创建者id
          type: string
          example: '1700000'
        parent_id:
          type: string
          description: 父分组频道id
          example: '7480000000000000'
        name:
          type: string
          description: 频道名称
          example: 示例频道
        topic:
          type: string
          description: 频道简介
          example: 这是示例频道的示例简介
        type:
          type: integer
          enum:
            - 1
            - 2
          description: 频道类型，`1`为文字频道，`2`为语音频道
        level:
          type: integer
          description: 频道排序
          example: 30
        slow_mode:
          type: integer
          description: 慢速限制，单位秒。用户发送消息之后再次发送消息的等待时间。
          example: 0
        limit_amount:
          type: integer
          description: 人数限制（如果为语音频道）
          example: 0
        is_category:
          type: boolean
          description: 是否为分组类型。注：在事件中，is_category为int类型，值为0或1。
          example: false
        server_url:
          type: string
          description: 语音服务器地址，`HOST:PORT`的格式
          example: HOST:PORT
    basic-properties-id:
      type: string
      description: 服务器频道ID
      example: '3321010478582000'
    guild:
      allOf:
        - $ref: '#/components/schemas/basic'
        - type: object
          properties:
            nickname:
              type: string
              description: 用户在服务器中的昵称
              example: tz-unn
            roles:
              type: array
              description: 用户在当前服务器中的角色 id 组成的列表
              items:
                $ref: '#/components/schemas/role_id'
            joined_at:
              type: integer
              description: 加入服务器的时间(ms)
              example: 1621338425026
            active_time:
              type: integer
              description: 最后活跃时间(ms)
              example: 1628688607719
            is_master:
              type: boolean
              description: 是否为该服务器主
              example: false
    properties-type:
      type: integer
      enum:
        - 1
        - 2
      description: 频道类型，`1`为文字频道，`2`为语音频道
    GuildChannelPermission:
      type: object
      required:
        - allow
        - deny
      properties:
        allow:
          type: integer
          description: >-
            允许的权限的结果集，详见[权限说明](https://developer.kookapp.cn/doc/http/guild-role#权限说明)
          example: 2048
        deny:
          type: integer
          description: >-
            拒绝的权限的结果集，详见[权限说明](https://developer.kookapp.cn/doc/http/guild-role#权限说明)
          example: 0
    GuildRoleId:
      type: integer
      format: unsigned integer
      description: 服务器角色id
      example: 113
    _fields_id:
      type: string
      description: 消息id
      example: 1c4532f6-*********-93e9-6347f410f91c
    author:
      description: 消息作者
      allOf:
        - $ref: '#/components/schemas/basic'
    content:
      type: string
      description: 消息内容
    embed:
      type: object
      properties:
        type:
          type: string
        url:
          type: string
      additionalProperties: true
      example:
        type: bili-video
        url: ''
        origin_url: https://www.bilibili.com/video/XXXXX
        av_no: 11J411E
        iframe_path: https://player.bilibili.com/player.html?xxx=xxx
        duration: 97
        title: Title
        pic: https://**/lc01gi.jpg
    embeds:
      type: array
      description: 超链接解析数据
      items:
        $ref: '#/components/schemas/embed'
    attachments:
      type: object
      properties:
        type:
          type: string
          enum:
            - image
        name:
          type: string
          description: 多媒体名
          example: xxx.jpg
        url:
          type: string
          description: 附件链接
          example: https://img.kookapp.cn/assets/2020-12/IHT5xxxxxA07o03m.jpg
    properties-attachments:
      type: object
      properties:
        type:
          type: string
          enum:
            - video
        name:
          type: string
          description: 多媒体名
          example: 002iQMhagx07Fx0S4xxxx323o0E010.mp4
        url:
          type: string
          description: 附件链接
          example: https://img.kookapp.cn/attachments/2020-12/11/asd.mp4
        file_type:
          description: 文件格式
          type: string
          example: video/mp4
        size:
          type: integer
          description: 大小 单位（B）
          example: 722882
        duration:
          type: number
          description: 视频时长（s）
          example: 15.673
        width:
          type: integer
          description: 视频宽度
          example: 640
        height:
          type: integer
          description: 视频高度
          example: 480
    file-properties-attachments:
      type: object
      properties:
        type:
          type: string
          enum:
            - file
        url:
          type: string
          example: https://img.kookapp.cn/attachments/2020-12/11/asd.txt
        file_type:
          description: 文件格式
          type: string
          example: text/plain
        name:
          type: string
          description: 多媒体名
        size:
          type: integer
          description: 大小 单位（B）
          example: 2575670
    _fields_attachments:
      oneOf:
        - $ref: '#/components/schemas/attachments'
        - $ref: '#/components/schemas/properties-attachments'
        - $ref: '#/components/schemas/file-properties-attachments'
    reaction:
      type: object
      properties:
        emoji:
          type: object
          properties:
            id:
              type: string
              example: '[#129315;]'
            name:
              type: string
              example: '[#129315;]'
        count:
          type: integer
        me:
          type: boolean
    reactions:
      type: array
      items:
        $ref: '#/components/schemas/reaction'
    quote:
      type: object
      properties:
        id:
          type: string
          description: 引用消息id
          example: 1c4532f6-*********-93e9-6347f410f91c
        type:
          type: integer
          description: 引用消息类型
          example: 1
        content:
          type: string
          description: 引用消息内容
          example: hello world
        create_at:
          type: integer
          description: 引用消息创建时间（毫秒）
          example: 1628069285358
        author:
          description: 作者的用户信息
          allOf:
            - $ref: '#/components/schemas/basic'
    _index_basic-3:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/_fields_id'
        type:
          $ref: '#/components/schemas/type'
        author:
          $ref: '#/components/schemas/author'
        content:
          $ref: '#/components/schemas/content'
        mention:
          $ref: '#/components/schemas/mention'
        mention_all:
          $ref: '#/components/schemas/mention_all'
        mention_roles:
          $ref: '#/components/schemas/mention_roles'
        mention_here:
          $ref: '#/components/schemas/mention_here'
        embeds:
          $ref: '#/components/schemas/embeds'
        attachments:
          $ref: '#/components/schemas/_fields_attachments'
        reactions:
          $ref: '#/components/schemas/reactions'
        quote:
          $ref: '#/components/schemas/quote'
        mention_info:
          $ref: '#/components/schemas/mention_info'
    SendMessageRequest:
      type: object
      required:
        - content
      properties:
        type:
          type: integer
          description: 消息类型, 见[type], 不传默认为`1`, 代表文本类型。`9`代表 kmarkdown 消息, `10`代表卡片消息。
          enum:
            - 1
            - 9
            - 10
          example: 9
          default: 1
        content:
          type: string
          description: 消息内容（为了保障消息正常发出，请不要超过8000字符）
        quote:
          allOf:
            - $ref: '#/components/schemas/_fields_id'
          description: 回复某条消息的`msg_id`
        nonce:
          type: string
          description: nonce, 服务端不做处理, 原样返回
    GuildEmojiId:
      type: string
      description: 表情的id, 可以为Guild Emoji Id或Emoji Id
      example: 1333609240026275/zTpnkS****0c80ck
    UserChat:
      type: object
      properties:
        code:
          type: string
          description: 私信会话 Code
          example: 5c7ec6d021216c136c9198285c15ed47
        last_read_time:
          type: integer
          description: 上次阅读消息的时间 (毫秒)
          example: 1612175653000
        latest_msg_time:
          type: integer
          description: 最新消息时间 (毫秒)
          example: 1612160693000
        unread_count:
          type: integer
          description: 未读消息数
          example: 0
        target_info:
          type: object
          description: 目标用户信息
          properties:
            id:
              $ref: '#/components/schemas/properties-id'
            username:
              type: string
              description: 目标用户名
              example: 夏天1
            online:
              type: boolean
              description: 是否在线
              example: false
            avatar:
              type: string
              description: 头像图片链接
              example: https://xxx.jpg/icon
    UserChatDetail:
      allOf:
        - $ref: '#/components/schemas/UserChat'
        - type: object
          properties:
            is_friend:
              type: boolean
              description: 是否是好友
              example: true
            is_blocked:
              type: boolean
              description: 是否已屏蔽对方
              example: false
            is_target_blocked:
              type: boolean
              description: 是否已被对方屏蔽
              example: false
    ChatCode:
      type: string
      description: 私聊会话 Code
      example: 3b4aa448b8xxxxc87a1b3770792e7433
    DirectMessage:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/_fields_id'
        type:
          type: integer
          description: 消息类型
        author_id:
          description: 作者的用户ID
          allOf:
            - $ref: '#/components/schemas/properties-id'
        content:
          type: string
          description: 消息内容
        embeds:
          $ref: '#/components/schemas/embeds'
        attachments:
          type: object
        reactions:
          $ref: '#/components/schemas/reactions'
        quote:
          $ref: '#/components/schemas/quote'
        read_status:
          type: boolean
          description: 是否已读
    GuildRole:
      type: object
      properties:
        role_id:
          type: integer
          format: unsigned integer
          description: 角色id
          example: 702
        name:
          type: string
          description: 角色名称
          example: 管理员
        color:
          type: integer
          format: unsigned integer
          minimum: 0
          maximum: 16777215
          description: 颜色
          example: 0
        position:
          type: integer
          format: unsigned integer
          description: 顺序，值越小载靠前
          example: 1
        hoist:
          type: integer
          format: unsigned integer
          description: 只能为0或者1，是否把该角色的用户在用户列表排到前面
          enum:
            - 0
            - 1
        mentionable:
          type: integer
          format: unsigned integer
          description: 只能为0或者1，该角色是否可以被提及
          enum:
            - 0
            - 1
        permissions:
          type: integer
          format: unsigned integer
          description: >-
            允许的权限，参见[权限说明](https://developer.kookapp.cn/doc/http/guild-role#权限说明)
          example: 2048
    GuildEmoji:
      type: object
      properties:
        name:
          type: string
          description: 表情的名称
          example: 摇滚啊
        id:
          $ref: '#/components/schemas/GuildEmojiId'
        user_info:
          description: 上传用户
          allOf:
            - $ref: '#/components/schemas/basic'
    MessageEvent:
      type: object
      description: 当事件的type非系统消息(255)时
      allOf:
        - $ref: '#/components/schemas/basic-2'
      properties:
        d:
          type: object
          properties:
            type:
              type: integer
              description: 与extra字段中的type相同，为1-10
            author_id:
              description: 发送者的用户id
              example: '2418200000'
            extra:
              type: object
              properties:
                type:
                  type: integer
                  description: 1:文字消息, 2:图片消息，3:视频消息，4:文件消息， 8:音频消息，9:KMarkdown，10:card消息
                guild_id:
                  type: string
                  description: 服务器id
                channel_name:
                  type: string
                  description: 频道名
                mention:
                  type: array
                  description: '`@特定用户` 的用户ID数组，与`mention_info`中的数据对应'
                  items:
                    type: string
                mention_all:
                  type: boolean
                  description: 是否含有`@全体人员`
                mention_roles:
                  type: array
                  description: '`@特定角色` 的角色ID数组，与`mention_info`中的数据对应'
                  items:
                    type: integer
                mention_here:
                  type: boolean
                author:
                  description: 消息作者
                  allOf:
                    - $ref: '#/components/schemas/basic'
    SystemEvent:
      type: object
      allOf:
        - $ref: '#/components/schemas/basic-2'
        - type: object
          properties:
            d:
              type: object
              properties:
                channel_type:
                  example: GROUP
                type:
                  description: 消息类型，系统消息为255
                  example: 255
                author_id:
                  description: 发送者id, 1 代表系统
                  example: 1
                content:
                  example: '[系统消息]'
                extra:
                  type: object
                  properties:
                    type:
                      type: string
                    body:
                      type: object
                msg_id:
                  example: 63d6a934-xxxx-a1f02c255213
                msg_timestamp:
                  example: 1612704007683
                nonce:
                  example: ''
                verify_token:
                  example: xxx
    reaction-2:
      type: object
      properties:
        d:
          type: object
          properties:
            extra:
              type: object
              properties:
                body:
                  type: object
                  properties:
                    channel_id:
                      allOf:
                        - $ref: '#/components/schemas/basic-properties-id'
                        - description: 消息所在的频道id
                    emoji:
                      type: object
                      properties:
                        name:
                          type: string
                          description: 表情的名称
                          example: 摇滚啊
                        id:
                          $ref: '#/components/schemas/GuildEmojiId'
                    user_id:
                      allOf:
                        - $ref: '#/components/schemas/properties-id'
                        - description: 点击的用户
                    msg_id:
                      allOf:
                        - $ref: '#/components/schemas/_fields_id'
                        - description: 用户点击的消息id
    message-update:
      type: object
      properties:
        d:
          type: object
          properties:
            extra:
              type: object
              properties:
                body:
                  type: object
                  properties:
                    msg_id:
                      allOf:
                        - $ref: '#/components/schemas/_fields_id'
                      description: 消息id
                    channel_id:
                      allOf:
                        - $ref: '#/components/schemas/basic-properties-id'
                      description: 消息所在的频道id
                    content:
                      type: string
                      description: 消息内容
                    mention:
                      type: array
                      description: '`@特定用户` 的用户ID数组，与`mention_info`中的数据对应'
                      items:
                        type: string
                    mention_all:
                      type: boolean
                      description: 是否含有`@全体人员`
                    mention_roles:
                      type: array
                      description: '`@特定角色` 的角色ID数组，与`mention_info`中的数据对应'
                      items:
                        type: string
                    mention_here:
                      type: boolean
    pin:
      type: object
      properties:
        d:
          type: object
          properties:
            extra:
              type: object
              properties:
                body:
                  type: object
                  properties:
                    channel_id:
                      allOf:
                        - $ref: '#/components/schemas/basic-properties-id'
                      description: 发生操作的频道id
                    operator_id:
                      allOf:
                        - $ref: '#/components/schemas/properties-id'
                      description: 操作人的用户id
                    msg_id:
                      allOf:
                        - $ref: '#/components/schemas/_fields_id'
                      description: 被操作的消息id
    PersonEvent:
      type: object
      allOf:
        - $ref: '#/components/schemas/SystemEvent'
      properties:
        d:
          type: object
          properties:
            channel_type:
              type: string
              description: 频道类型，私聊消息为`PERSON`
              example: PERSON
            extra:
              type: object
              properties:
                body:
                  type: object
                  properties:
                    msg_id:
                      allOf:
                        - $ref: '#/components/schemas/_fields_id'
                      description: 被操作的消息id
                    chat_code:
                      $ref: '#/components/schemas/ChatCode'
    member:
      type: object
      properties:
        d:
          type: object
          properties:
            extra:
              type: object
              properties:
                body:
                  type: object
                  properties:
                    user_id:
                      allOf:
                        - $ref: '#/components/schemas/properties-id'
                      description: 用户id
    guild-2:
      type: object
      properties:
        d:
          type: object
          properties:
            extra:
              type: object
              properties:
                body:
                  type: object
                  properties:
                    id:
                      type: string
                      description: 服务器id
                    name:
                      type: string
                      description: 服务器主id
                    icon:
                      type: string
                      description: 服务器icon的地址
                      example: https://xxx/icons/2020-05/YQyfHxxx.png/icon
                    notify_type:
                      type: integer
                      description: >-
                        通知类型, `0`代表默认使用服务器通知设置，`1`代表接收所有通知,
                        `2`代表仅@被提及，`3`代表不接收通知
                      enum:
                        - 0
                        - 1
                        - 2
                        - 3
                    region:
                      type: string
                      description: 服务器默认使用语音区域
                    enable_open:
                      type: boolean
                      description: 是否为公开服务器
                    open_id:
                      type: string
                      description: 公开服务器id
                    default_channel_id:
                      type: string
                      description: 默认频道id
                    welcome_channel_id:
                      type: string
                      description: 欢迎频道id
    BasicEvent:
      $ref: '#/components/schemas/basic-2'
    Guild:
      $ref: '#/components/schemas/_index_basic'
    User:
      $ref: '#/components/schemas/basic'
    GuildId:
      $ref: '#/components/schemas/id'
    UserId:
      $ref: '#/components/schemas/properties-id'
    GuildChannel:
      $ref: '#/components/schemas/_index_basic-2'
    GuildChannelId:
      $ref: '#/components/schemas/basic-properties-id'
    GuildChannelType:
      $ref: '#/components/schemas/properties-type'
    Message:
      $ref: '#/components/schemas/_index_basic-3'
  requestBodies:
    create:
      content:
        application/json:
          schema:
            type: object
            required:
              - channel_id
            example: null
            properties:
              channel_id:
                description: 频道id, 如果频道是分组的id,会同步给所有sync=1的子频道
                allOf:
                  - $ref: '#/components/schemas/basic-properties-id'
              type:
                type: string
                description: value的类型，只能为"role_id","user_id",不传则默认为"user_id"
                enum:
                  - role_id
                  - user_id
                default: user_id
              value:
                type:
                  - string
                  - integer
                description: 根据type的值，为用户id或频道id
                example: '2418239356'
    update:
      content:
        application/json:
          schema:
            type: object
            required:
              - channel_id
            properties:
              channel_id:
                description: 频道id, 如果频道是分组的id,会同步给所有sync=1的子频道
                allOf:
                  - $ref: '#/components/schemas/basic-properties-id'
              type:
                type: string
                description: value的类型，只能为"role_id","user_id",不传则默认为"user_id"
                enum:
                  - role_id
                  - user_id
                default: user_id
              value:
                type:
                  - string
                  - integer
                description: 根据type的值，为用户id或频道id
                example: '2418239356'
              allow:
                type: integer
                description: 默认为0,想要设置的允许的权限值
                default: 0
              deny:
                type: integer
                description: 默认为0,想要设置的拒绝的权限值
                default: 0
    delete:
      content:
        application/json:
          schema:
            type: object
            required:
              - channel_id
            properties:
              channel_id:
                description: 频道id, 如果频道是分组的id,会同步给所有sync=1的子频道
                allOf:
                  - $ref: '#/components/schemas/basic-properties-id'
              type:
                type: string
                description: value的类型，只能为"role_id","user_id",不传则默认为"user_id"
                enum:
                  - role_id
                  - user_id
                default: user_id
              value:
                type:
                  - string
                  - integer
                description: 根据type的值，为用户id或频道id
                example: '2418239356'
    text:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/MessageEvent'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      type:
                        example: 1
                      extra:
                        type: object
                        properties:
                          type:
                            allOf:
                              - $ref: '#/components/schemas/type'
                            example: 1
                          guild_id:
                            $ref: '#/components/schemas/id'
                          channel_name:
                            type: string
                            description: 频道名
                            example: 一个频道
                          mention:
                            $ref: '#/components/schemas/mention'
                          mention_all:
                            $ref: '#/components/schemas/mention_all'
                          mention_roles:
                            $ref: '#/components/schemas/mention_roles'
                          mention_here:
                            $ref: '#/components/schemas/mention_here'
                          author:
                            $ref: '#/components/schemas/guild'
                          quote:
                            $ref: '#/components/schemas/quote'
    image:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/MessageEvent'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      content:
                        description: 文件链接，与`attachments`的`url`相同
                        example: >-
                          https://img.kookapp.cn/assets/2020-12/IHT5xxxxxA07o03m.jpg
                      type:
                        example: 2
                      extra:
                        $ref: '#/components/schemas/image'
    video:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/MessageEvent'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      content:
                        description: 文件链接，与`attachments`的`url`相同
                        example: https://img.kookapp.cn/attachments/2020-12/11/asd.mp4
                      type:
                        example: 3
                      extra:
                        $ref: '#/components/schemas/video'
    file:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/MessageEvent'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      content:
                        description: 文件链接，与`attachments`的`url`相同
                        example: https://img.kookapp.cn/attachments/2020-12/11/asd.txt
                      type:
                        example: 4
                      extra:
                        $ref: '#/components/schemas/file'
    kmarkdown:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/MessageEvent'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      type:
                        example: 9
                      extra:
                        $ref: '#/components/schemas/kmarkdown'
    card:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/MessageEvent'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      type:
                        example: 10
                      extra:
                        $ref: '#/components/schemas/card'
    add:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - $ref: '#/components/schemas/reaction-2'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`added_reaction`
                            example: added_reaction
    reaction_delete:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - $ref: '#/components/schemas/reaction-2'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`deleted_reaction`
                            example: deleted_reaction
    message_update:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - $ref: '#/components/schemas/message-update'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`updated_message`
                            example: updated_message
                          body:
                            type: object
                            properties:
                              udpated_at:
                                type: integer
                                description: 更新时间戳(毫秒)
                                example: 1612703810779
    message_delete:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`deleted_message`
                            example: updated_message
                          body:
                            type: object
                            properties:
                              msg_id:
                                allOf:
                                  - $ref: '#/components/schemas/_fields_id'
                                description: 被删除的消息id
                              channel_id:
                                allOf:
                                  - $ref: '#/components/schemas/basic-properties-id'
                                description: 消息所在频道id
    channel_create:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`added_channel`
                            example: added_channel
                          body:
                            $ref: '#/components/schemas/_index_basic-2'
    channel_update:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`updated_channel`
                            example: updated_channel
                          body:
                            $ref: '#/components/schemas/_index_basic-2'
    channel_delete:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`deleted_channel`
                            example: deleted_channel
                          body:
                            type: object
                            properties:
                              id:
                                allOf:
                                  - $ref: '#/components/schemas/basic-properties-id'
                                description: 被删除的频道id
                              deleted_at:
                                type: integer
                                description: 删除操作的时间戳(毫秒)
                                example: 1612777405595
    pin_add:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - $ref: '#/components/schemas/pin'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`pinned_message`
                            example: pinned_message
    cancel:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - $ref: '#/components/schemas/pin'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`unpinned_message`
                            example: unpinned_message
    message_update-2:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/PersonEvent'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      channel_type:
                        type: string
                        description: 频道类型，私聊消息为`PERSON`
                        example: PERSON
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`updated_private_message`
                            example: updated_private_message
                          body:
                            type: object
                            properties:
                              msg_id:
                                allOf:
                                  - $ref: '#/components/schemas/_fields_id'
                                description: 被更新的消息id
                              author_id:
                                allOf:
                                  - $ref: '#/components/schemas/properties-id'
                                description: 被更新的消息的创建者id
                              target_id:
                                allOf:
                                  - $ref: '#/components/schemas/properties-id'
                                description: 被更新的消息的目标用户id
                              content:
                                type: string
                                description: 更新后的文本
                                example: asdaaad
                              updated_at:
                                type: integer
                                description: 更新时间戳(毫秒)
                                example: 1612778254192
    message_delete-2:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/PersonEvent'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`deleted_private_message`
                            example: deleted_private_message
                          body:
                            type: object
                            properties:
                              msg_id:
                                allOf:
                                  - $ref: '#/components/schemas/_fields_id'
                                description: 被删除的消息id
                              author_id:
                                allOf:
                                  - $ref: '#/components/schemas/properties-id'
                                description: 被删除的消息的创建者id
                              target_id:
                                allOf:
                                  - $ref: '#/components/schemas/properties-id'
                                description: 被删除的消息的目标用户id
                              updated_at:
                                type: integer
                                description: 删除的时间戳(毫秒)
                                example: 1612778254192
    reaction_add:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/PersonEvent'
              - $ref: '#/components/schemas/reaction-2'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`private_added_reaction`
                            example: private_added_reaction
    reaction_delete-2:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/PersonEvent'
              - $ref: '#/components/schemas/reaction-2'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`private_deleted_reaction`
                            example: private_deleted_reaction
    join:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - $ref: '#/components/schemas/member'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`joined_guild`
                            example: joined_guild
                          body:
                            type: object
                            properties:
                              joined_at:
                                type: integer
                                description: 加入服务器的时间(毫秒)
                                example: 1612774315000
    exit:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - $ref: '#/components/schemas/member'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`exited_guild`
                            example: exited_guild
                          body:
                            type: object
                            properties:
                              exited_at:
                                type: integer
                                description: 退出服务器的时间(毫秒)
                                example: 1612774315000
    member_update:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - $ref: '#/components/schemas/member'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`updated_guild_member`
                            example: updated_guild_member
                          body:
                            type: object
                            properties:
                              nickname:
                                type: string
                                description: 昵称
                                example: 新昵称
    online:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - $ref: '#/components/schemas/member'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`guild_member_online`
                            example: guild_member_online
                          body:
                            type: object
                            properties:
                              event_time:
                                type: integer
                                description: 用户上线时间(毫秒)
                                example: 1612774315000
                              guilds:
                                type: array
                                description: 服务器id组成的数组, 代表与该用户所在的共同的服务器
                                items:
                                  type: string
                                example:
                                  - '601638990000000'
    offline:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - $ref: '#/components/schemas/member'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`guild_member_offline`
                            example: guild_member_offline
                          body:
                            type: object
                            properties:
                              event_time:
                                type: integer
                                description: 用户下线时间(毫秒)
                                example: 1612774315000
                              guilds:
                                type: array
                                description: 服务器id组成的数组, 代表与该用户所在的共同的服务器
                                items:
                                  type: string
                                example:
                                  - '601638990000000'
    role_add:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`added_role`
                            example: added_role
                          body:
                            $ref: '#/components/schemas/role_basic'
    role_update:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`updated_role`
                            example: updated_role
                          body:
                            $ref: '#/components/schemas/GuildRole'
    role_delete:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`deleted_role`
                            example: deleted_role
                          body:
                            $ref: '#/components/schemas/GuildRole'
    guild_update:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - $ref: '#/components/schemas/guild-2'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`updated_guild`
                            example: updated_guild
    guild_delete:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - $ref: '#/components/schemas/guild-2'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`deleted_guild`
                            example: deleted_guild
    ban:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`added_block_list`
                            example: added_block_list
                          body:
                            type: object
                            properties:
                              operator_id:
                                allOf:
                                  - $ref: '#/components/schemas/properties-id'
                                description: 操作人id
                              user_id:
                                type: array
                                description: 被封禁成员id列表
                                items:
                                  $ref: '#/components/schemas/properties-id'
                              remark:
                                type: string
                                description: 封禁理由
                                example: 频繁发广告
    unban:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`deleted_block_list`
                            example: deleted_block_list
                          body:
                            type: object
                            properties:
                              operator_id:
                                allOf:
                                  - $ref: '#/components/schemas/properties-id'
                                description: 操作人id
                              user_id:
                                type: array
                                description: 被封禁成员id列表
                                items:
                                  $ref: '#/components/schemas/properties-id'
    channel_join:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`joined_channel`
                            example: joined_channel
                          body:
                            type: object
                            properties:
                              user_id:
                                $ref: '#/components/schemas/properties-id'
                              channel_id:
                                allOf:
                                  - $ref: '#/components/schemas/basic-properties-id'
                                description: 加入的频道id
                              joined_at:
                                type: integer
                                description: 加入的时间（ms)
                                example: 1612790368279
    channel_exit:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`exited_channel`
                            example: exited_channel
                          body:
                            type: object
                            properties:
                              user_id:
                                $ref: '#/components/schemas/properties-id'
                              channel_id:
                                allOf:
                                  - $ref: '#/components/schemas/basic-properties-id'
                                description: 加入的频道id
                              exited_at:
                                type: integer
                                description: 退出的时间（ms)
                                example: 1612790411267
    guild_join:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      channel_type:
                        example: PERSON
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`self_joined_guild`
                            example: self_joined_guild
                          body:
                            type: object
                            properties:
                              guild_id:
                                $ref: '#/components/schemas/id'
    guild_exit:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      channel_type:
                        example: PERSON
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`self_exited_guild`
                            example: self_exited_guild
                          body:
                            type: object
                            properties:
                              guild_id:
                                $ref: '#/components/schemas/id'
    info_update:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`user_updated`
                            example: user_updated
                          body:
                            type: object
                            properties:
                              user_id:
                                $ref: '#/components/schemas/properties-id'
                              username:
                                type: string
                                description: 用户名
                                example: 一个新用户名
                              avatar:
                                type: string
                                description: 头像地址
                                example: >-
                                  https://img.kookapp.cn/avatars/2020-02/xxxx.jpg/icon
    click-button:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SystemEvent'
              - type: object
                properties:
                  d:
                    type: object
                    properties:
                      extra:
                        type: object
                        properties:
                          type:
                            description: 消息类型，此处为`message_btn_click`
                            example: message_btn_click
                          body:
                            type: object
                            properties:
                              user_id:
                                $ref: '#/components/schemas/properties-id'
                              msg_id:
                                $ref: '#/components/schemas/_fields_id'
                              value:
                                type: string
                                description: 按钮`return-val`的返回值
                              target_id:
                                allOf:
                                  - $ref: '#/components/schemas/basic-properties-id'
                                description: 消息所在频道的id
                              guild_id:
                                $ref: '#/components/schemas/id'
                              user_info:
                                $ref: '#/components/schemas/guild'
security: []
